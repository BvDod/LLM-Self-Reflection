{"task_id": "HumanEval/0", "completion": "    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    result = []\n    group_start_index = 0\n    while group_start_index < len(paren_string):\n        open_count = 0\n        for i in range(group_start_index, len(paren_string)):\n            if paren_string[i] == '(':\n                open_count += 1\n            elif paren_string[i] == ')':\n                open_count -= 1\n                if open_count == 0:\n                    result.append(paren_string[group_start_index:i+1])\n                    group_start_index = i + 1\n                    break\n        else:  # no 'break' statement, means we've iterated through the entire string and haven't found a balanced group\n            group_start_index += 1  # move to the next potential group\n    return result"}
{"task_id": "HumanEval/2", "completion": "    \"\"\" Given a positive floating point number, it can be decomposed into \n    and integer part (largest integer smaller than given number) and decimals \n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)\n\ndef standard_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    variance = sum((x - mean) ** 2 for x in numbers) / len(numbers)\n    return variance ** 0.5\n\ndef variance(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((x - mean) ** 2 for x in numbers) / len(numbers)\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    median = sorted(numbers)[len(numbers) // 2]\n    return sum(abs(num - median) for num in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.extend([delimeter, numbers[i]])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    def get_nesting_level(s: str) -> int:\n        nesting_level = 0\n        max_nesting_level = 0\n        for c in s:\n            if c == '(':\n                nesting_level += 1\n                max_nesting_level = max(max_nesting_level, nesting_level)\n            elif c == ')':\n                nesting_level -= 1\n        return max_nesting_level\n\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        result.append(get_nesting_level(group))\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    total_sum = sum(numbers) if numbers else 0\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n\n    return total_sum, total_product"}
{"task_id": "HumanEval/9", "completion": "    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    return [max(numbers[:i+1]) for i in range(len(numbers))]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef factorial(n: int) -> int:\n    \"\"\"Calculate the factorial of a number.\"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\"Find the Greatest Common Divisor of two numbers.\"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\"Calculate the Least Common Multiple of two numbers.\"\"\"\n    return abs(a * b) // gcd(a, b)"}
