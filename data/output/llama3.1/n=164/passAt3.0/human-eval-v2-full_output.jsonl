{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    paren_string = re.sub(r'\\s+', '', paren_string)  # Remove all spaces from the string\n    groups = re.findall(r'\\([^()]+\\)', paren_string)  # Find all balanced groups of parentheses\n    return groups"}
{"task_id": "HumanEval/1", "completion": "    result = []\n    groups = re.split(r'\\(\\)|\\)', paren_string)\n    \n    for group in groups:\n        if group:  # Filter out empty strings\n            result.append(group)\n            \n    return result"}
{"task_id": "HumanEval/1", "completion": "    groups = re.findall(r'\\([^)]+\\)', paren_string)\n    return [group[1:-1] for group in groups]"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/2", "completion": "    return round(number - int(number), 10) if number > 0 else \"Invalid input\""}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    \"\"\" For a given list of input numbers, calculate the Median.\n    The median is the middle value in an ordered integer list.\n    If the list has an even number of elements, the median is the average of the two middle values.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n    num_elements = len(sorted_numbers)\n\n    if num_elements % 2 == 0:\n        mid1 = sorted_numbers[num_elements // 2 - 1]\n        mid2 = sorted_numbers[num_elements // 2]\n        return (mid1 + mid2) / 2\n    else:\n        return sorted_numbers[num_elements // 2]\n\ndef mean(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate the Mean.\n    The mean is the average value in an integer list.\n    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \"\"\"\n    return sum(numbers) / len(numbers)"}
{"task_id": "HumanEval/4", "completion": "    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)"}
{"task_id": "HumanEval/4", "completion": "    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the median absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.25\n    \"\"\"\n    numbers.sort()\n    n = len(numbers)\n    \n    if n == 0:\n        return 0\n    \n    q1 = numbers[n//4] if n % 4 != 0 else (numbers[n//4 - 1] + numbers[n//4]) / 2\n    q3 = numbers[3*n//4] if n % 4 != 0 else (numbers[3*n//4 - 1] + numbers[3*n//4]) / 2\n    \n    median = (q1 + q3) / 2\n    \n    absolute_deviations = [abs(num - median) for num in numbers]\n    \n    median_absolute_deviation = sorted(absolute_deviations)[n//2] if n % 2 != 0 else ((sorted(absolute_deviations)[n//2 - 1] + sorted(absolute_deviations)[n//2]) / 2)\n    \n    return median_absolute_deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        if i != len(numbers) - 1:\n            result.append(numbers[i])\n            result.append(delimeter)\n    result.pop()\n    return result"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for num in numbers:\n        result.append(num)\n        if len(result) > 1 and result[-2] != delimeter:\n            result.insert(-1, delimeter)\n    return result"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i, num in enumerate(numbers):\n        if i == len(numbers) - 1:\n            result.append(num)\n        else:\n            result.extend([num, delimeter])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_levels = []\n    groups = paren_string.split()\n    \n    for group in groups:\n        level = 0\n        max_level = 0\n        \n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        \n        max_levels.append(max_level)\n    \n    return max_levels"}
{"task_id": "HumanEval/6", "completion": "    max_levels = []\n    \n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        \n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n                \n        max_levels.append(max_level)\n        \n    return max_levels"}
{"task_id": "HumanEval/6", "completion": "    def max_nesting(s: str) -> int:\n        stack = []\n        nesting_level = 0\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if stack:\n                    stack.pop()\n                else:\n                    return nesting_level + 1\n            else:\n                raise ValueError(\"Invalid character: {}\".format(c))\n        return len(stack)\n\n    result = []\n    groups = paren_string.split(' ')\n    for group in groups:\n        result.append(max_nesting(group))\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    total_sum = 0\n    total_product = 1\n    \n    for num in numbers:\n        total_sum += num\n        total_product *= num\n        \n    return total_sum, total_product"}
{"task_id": "HumanEval/8", "completion": "    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    total_sum = 0\n    total_product = 1\n    \n    for number in numbers:\n        total_sum += number\n        total_product *= number\n        \n    return total_sum, total_product"}
{"task_id": "HumanEval/8", "completion": "    product = 1\n    for num in numbers:\n        product *= num\n    return sum(numbers), product"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_so_far = float('-inf')\n    \n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n        \n    return result"}
{"task_id": "HumanEval/9", "completion": "    max_so_far = float('-inf')\n    result = []\n\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n\n    return result"}
{"task_id": "HumanEval/9", "completion": "    return [max(numbers[:i+1]) for i in range(len(numbers))]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:  # check for empty string\n        return ''\n\n    length = len(string)\n    i = 0\n    while i < length // 2:\n        if string[i] != string[length - 1 - i]:\n            break\n        i += 1\n\n    return string + string[:length - i][::-1]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n        Algorithm idea is simple:\n        - Find the longest postfix of supplied string that is a palindrome.\n        - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n        \n    >>> make_palindrome('')\n    ''\n    \n    >>> make_palindrome('cat')\n    'catac'\n    \n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    def is_pal(s):\n        return s == s[::-1]\n    for i in range(len(string), 0, -1):\n        if is_pal(string[:i]):\n            return string + string[-1*i:][::-1]\n    return string"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the length of longest prefix that forms a palindrome \n    starting from given string. Algorithm idea is simple:\n    - Iterate through characters in input string and at each point check if suffix formed by cutting off all previously seen characters on the right\n      (including current one) is a palindrome.\n    >>> is_longest_palindrome_prefix('a')\n    1\n    >>> is_longest_palindrome_prefix('aa')\n    2\n    \"\"\"\n    i, j = 0, len(string)-1\n    while i < j:\n        if string[i] != string[j]:\n            return i+1\n        else:\n            i += 1; j -= 1\n    return len(string)\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string + string[:is_longest_palindrome_prefix(string)][::-1]"}
{"task_id": "HumanEval/11", "completion": "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"task_id": "HumanEval/11", "completion": "    result = ''.join(str(int(c1) ^ int(c2)) for c1, c2 in zip(a, b))\n    return result"}
{"task_id": "HumanEval/11", "completion": "    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join('1' if (x == '1') ^ (y == '1') else '0' for x, y in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    else:\n        return max(strings, key=len)"}
{"task_id": "HumanEval/12", "completion": "    return max(strings, default=None) if strings else None"}
{"task_id": "HumanEval/13", "completion": "    while b != 0:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "HumanEval/13", "completion": "    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "HumanEval/13", "completion": "    while b != 0:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(1, len(string)+1)]"}
{"task_id": "HumanEval/14", "completion": "    return [string[i:] for i in range(len(string)+1)]"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(1, len(string)+1)]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(map(str, range(n + 1)))"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/16", "completion": "    string = string.lower()  # Convert the entire string to lowercase\n    distinct_chars = set(string)  # Create a set of unique characters\n    return len(distinct_chars)  # Return the number of unique characters"}
{"task_id": "HumanEval/17", "completion": "    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    beats = []\n    \n    for note in music_string.split():\n        if note in notes:\n            beats.append(notes[note])\n    \n    return beats"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    note_dict = {'o': 4, 'o|': 2, '.|': 1}\n\n    for char in music_string:\n        if char == ' ':\n            continue\n\n        if char not in note_dict:\n            raise ValueError(f\"Unknown note: {char}\")\n\n        result.append(note_dict[char])\n\n    return result"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for note in music_string.split():\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result"}
{"task_id": "HumanEval/18", "completion": "    return string.count(substring)"}
{"task_id": "HumanEval/18", "completion": "    if not string or not substring:\n        return 0\n    \n    count = 0\n    index = 0\n    \n    while True:\n        index = string.find(substring, index)\n        \n        if index == -1:\n            break\n        \n        count += 1\n        index += len(substring)\n    \n    return count"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    if not string and not substring:\n        return count\n    while True:\n        index = string.find(substring)\n        if index != -1:\n            count += 1\n            string = string[index + len(substring):]\n        else:\n            break\n    return count"}
{"task_id": "HumanEval/19", "completion": "    nums = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n            'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    numbers_list = [num for num in numbers.split()]\n    sorted_numbers = sorted(numbers_list, key=lambda x: nums[x])\n    \n    return ' '.join(sorted_numbers)"}
{"task_id": "HumanEval/19", "completion": "    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    num_list = [num_dict[num] for num in numbers.split()]\n    sorted_num_list = sorted(num_list)\n    \n    return ' '.join([str(num) for num in sorted_num_list])"}
{"task_id": "HumanEval/19", "completion": "    num_dict = {\n        \"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3,\n        \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7,\n        \"eight\": 8, \"nine\": 9\n    }\n\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict.get(x))\n    return ' '.join(sorted_numbers)"}
{"task_id": "HumanEval/20", "completion": "    if len(numbers) < 2:\n        raise ValueError(\"List must be of length at least two\")\n        \n    numbers.sort()\n    \n    smallest_diff = abs(numbers[0] - numbers[1])\n    closest_nums = (numbers[0], numbers[1])\n    \n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        \n        if diff < smallest_diff:\n            smallest_diff = diff\n            closest_nums = (numbers[i], numbers[i + 1])\n            \n    return closest_nums"}
{"task_id": "HumanEval/20", "completion": "    \"\"\" From a supplied list of numbers select and return the smallest positive number missing from the set.\n    >>> find_smallest_missing_positive([1.0, -2.0, 3.0, 4.0, 5.0, 2.2])\n    1.0\n    \"\"\"\n    numbers = sorted(set(num for num in numbers if isinstance(num, int) and num > 0))\n    i = 1\n    while True:\n        if i not in numbers:\n            return i\n        i += 1\n\ndef find_fibonacci(n: int) -> Tuple[int, int]:\n    \"\"\" Return the first n Fibonacci numbers starting from 0 and 1.\n    >>> find_fibonacci(5)\n    (0, 1, 1, 2, 3)\n    \"\"\"\n    fib_sequence = [0, 1]\n    while len(fib_sequence) < n:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return tuple(fib_sequence)\n\ndef find_divisors(n: int) -> List[int]:\n    \"\"\" From a supplied integer find and return all divisors.\n    >>> find_divisors(12)\n    [1, 2, 3, 4, 6, 12]\n    \"\"\"\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ndef find_first_n_primes(n: int) -> List[int]:\n    \"\"\" Find and return the first n prime numbers.\n    >>> find_first_n_primes(5)\n    [2, 3, 5, 7, 11]\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        \n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair\n\ndef find_max_consecutive_sum(numbers: List[int]) -> int:\n    \"\"\" From a supplied list of integers select and return the maximum sum of any consecutive sequence.\n    >>> find_max_consecutive_sum([1, -2, 3, -4, 5])\n    6\n    \"\"\"\n    max_sum = float('-inf')\n    \n    for i in range(len(numbers)):\n        current_sum = 0\n        \n        for j in range(i, len(numbers)):\n            current_sum += numbers[j]\n            \n            if current_sum > max_sum:\n                max_sum = current_sum\n                \n    return max_sum\n\ndef find_all_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a supplied list of integers select and return all duplicates.\n    >>> find_all_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    []\n    \"\"\"\n    num_count = {}\n    \n    for num in numbers:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n            \n    return [num for num, count in num_count.items() if count > 1]\n\ndef find_first_non_divisible(n: int) -> int:\n    \"\"\" From a supplied integer find and return the first non-divisible number.\n    >>> find_first_non_divisible(100)\n    2\n    \"\"\"\n    i = 1\n    \n    while True:\n        if n % i != 0:\n            return i\n        i += 1\n\ndef find_greatest_common_divisor(numbers: List[int]) -> int:\n    \"\"\" From a supplied list of integers select and return the greatest common divisor.\n    >>> find_greatest_common_divisor([6, 12, 18])\n    6\n    \"\"\"\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n            \n        return abs(a)\n\n    result = numbers[0]\n    \n    for num in numbers[1:]:\n        result = gcd(result, num)\n        \n    return result\n\ndef find_next_larger_number(numbers: List[int]) -> int:\n    \"\"\" From a supplied list of integers select and return the next larger number.\n    >>> find_next_larger_number([1, 2, 3])\n    4\n    \"\"\"\n    numbers = sorted(set(num for num in numbers))\n    \n    if len(numbers) == 0:\n        return -1\n    \n    if len(numbers) > 0 and all(numbers[i] % 10 != numbers[i + 1] % 10 for i in range(len(numbers) - 1)):\n        next_larger = numbers[-1] + 1\n        \n        while next_larger % 10 == numbers[0] % 10:\n            next_larger += 1\n            \n        return next_larger\n    else:\n        return int(str(max(numbers))[:-1]) + (int(str(max(numbers))[-1]) % 2)\n\ndef find_all_factors(n: int) -> List[int]:\n    \"\"\" From a supplied integer select and return all factors.\n    >>> find_all_factors(12)\n    [1, 2, 3, 4, 6, 12]\n    \"\"\"\n    factors = []\n    \n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            \n    return factors\n\ndef find_all_permutations(string: str) -> List[str]:\n    \"\"\" From a supplied string select and return all permutations.\n    >>> find_all_permutations('abc')\n    ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n    \"\"\"\n    if len(string) == 1:\n        return [string]\n        \n    permutations = []\n    \n    for i in range(len(string)):\n        char = string[i]\n        remaining_string = string[:i] + string[i + 1:]\n        \n        for perm in find_all_permutations(remaining_string):\n            permutations.append(char + perm)\n            \n    return permutations\n\ndef find_fractions_in_decimal(numerator: int, denominator: int) -> List[str]:\n    \"\"\" From a supplied numerator and denominator select and return fractions within the decimal number.\n    >>> find_fractions_in_decimal(11, 8)\n    ['1/4', '3/8']\n    \"\"\"\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n            \n        return abs(a)\n\n    common_divisor = gcd(numerator, denominator)\n    \n    numerator //= common_divisor\n    denominator //= common_divisor\n    \n    fractions = []\n    \n    for i in range(1, int(denominator / 2) + 1):\n        if denominator % i == 0:\n            frac_numerator = i * numerator\n            frac_denominator = i * denominator\n            \n            reduced_frac = f\"{frac_numerator // gcd(frac_numerator, frac_denominator)}/{frac_denominator // gcd(frac_numerator, frac_denominator)}\"\n            \n            fractions.append(reduced_frac)\n            \n    return sorted(list(set(fractions)))\n\ndef find_all_sublists(lst: List[int]) -> List[List[int]]:\n    \"\"\" From a supplied list select and return all sublists.\n    >>> find_all_sublists([1, 2, 3])\n    [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]\n    \"\"\"\n    result = []\n    \n    for i in range(0, len(lst) + 1):\n        for j in range(i, len(lst) + 1):\n            result.append(lst[i:j])\n                \n    return result\n\ndef find_all_rotations(string: str) -> List[str]:\n    \"\"\" From a supplied string select and return all rotations.\n    >>> find_all_rotations('abc')\n    ['abc', 'cab', 'bca']\n    \"\"\"\n    if len(string) == 1:\n        return [string]\n        \n    rotations = []\n    \n    for i in range(len(string)):\n        rotation = string[i:] + string[:i]\n        rotations.append(rotation)\n        \n    return rotations\n\ndef find_all_substrings(string: str, substring: str) -> List[str]:\n    \"\"\" From a supplied string and substring select and return all substrings.\n    >>> find_all_substrings('abc', 'bc')\n    ['abc', 'bc']\n    \"\"\"\n    index = 0\n    \n    while True:\n        index = string.find(substring, index)\n        \n        if index != -1:\n            result.append(string[index:])\n            index += 1\n        else:\n            break\n            \n    return result\n\ndef find_all_divisors(n: int) -> List[int]:\n    \"\"\" From a supplied integer select and return all divisors.\n    >>> find_all_divisors(12)\n    [1, 2, 3, 4, 6, 12]\n    \"\"\"\n    factors = []\n    \n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            \n    return factors\n\ndef find_all_palindromic_permutations(string: str) -> List[str]:\n    \"\"\" From a supplied string select and return all palindromic permutations.\n    >>> find_all_palindromic_permutations('aab')\n    ['aabb', 'abba']\n    \"\"\"\n    def count_chars(s):\n        char_count = {}\n        \n        for char in s:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n                \n        return char_count\n        \n    char_count = count_chars(string)\n    \n    odd_char = ''\n    \n    for char, count in char_count.items():\n        if count % 2 != 0:\n            odd_char = char\n            \n    permutations = []\n    \n    def backtrack(s='', perm=''):\n        if not s and len(perm) == string_length:\n            permutations.append(''.join(sorted(perm)))\n            return\n            \n        for i, char in enumerate(string):\n            if s[i] != char:\n                backtrack(s[:i]+char+s[i:], perm + char)\n                \n    backtrack()\n    \n    palindromic_permutations = []\n    \n    for perm in permutations:\n        is_palindrome = True\n        \n        for i in range(len(perm)):\n            if perm[i] != perm[-1 - i]:\n                is_palindrome = False\n                break\n                \n        if odd_char and perm.count(odd_char) % 2 != 0:\n            continue\n            \n        if is_palindrome:\n            palindromic_permutations.append(''.join(sorted(perm)))\n            \n    return sorted(list(set(palindromic_permutations)))\n\ndef find_all_anagrams(string: str, sub_string: str) -> List[str]:\n    \"\"\" From a supplied string and substring select and return all anagrams.\n    >>> find_all_anagrams('abcde', 'abc')\n    ['abcde']\n    \"\"\"\n    anagrams = []\n    \n    for i in range(len(string)):\n        sub_str = string[i:i+len(sub_string)]\n        \n        if sorted(sub_str) == sorted(sub_string):\n            anagrams.append(sub_str)\n            \n    return anagrams"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    closest = min(numbers[1:-1], key=lambda x: abs(x - numbers[1]))\n    return (min(closest, numbers[min(range(len(numbers)), key=lambda i:abs(numbers[i]-numbers[1]))]),\n            max(closest, numbers[max(range(len(numbers)), key=lambda i:abs(numbers[i]-numbers[1]))]))"}
{"task_id": "HumanEval/21", "completion": "    return [(n - min(numbers)) / (max(numbers) - min(numbers)) for n in numbers]"}
{"task_id": "HumanEval/21", "completion": "    return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    if min_val == max_val:\n        return [0.0] * len(numbers)\n    \n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/22", "completion": "    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/23", "completion": "    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/23", "completion": "    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    def prime_factors(x: int) -> List[int]:\n        i = 2\n        factors = []\n        while i * i <= x:\n            if x % i:\n                i += 1\n            else:\n                x //= i\n                factors.append(i)\n        if x > 1:\n            factors.append(x)\n        return factors\n\n    result = prime_factors(n)\n    for factor in set(result):\n        count = result.count(factor)\n        result = [factor] * count + result[count:]\n\n    return result"}
{"task_id": "HumanEval/25", "completion": "    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    i = 2\n    result = []\n    \n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            result.append(i)\n            \n    if n > 1:\n        result.append(n)\n        \n    return result"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            n //= i\n            factors.append(i)\n        else:\n            i += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/26", "completion": "    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    \n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n            \n    return result"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    \n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n            \n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(char.swapcase() for char in string)"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return reduce(lambda x, y: x + y, strings, '')"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/29", "completion": "    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/29", "completion": "    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/30", "completion": "    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in numbers if num > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    n = len(xs)\n    if n % 2 == 0:\n        a = xs[-1] / xs[0]\n        return -a\n    else:\n        raise ValueError(\"List xs must have even number of coefficients\")"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    n = len(xs)\n    if n == 1: return -xs[0]\n    elif n % 2 != 0: return None\n    \n    a, b = xs[-2], xs[-1]\n    c = -xs[1] / (a + b) * math.pow(-xs[0] / b, 2)\n    \n    if abs(c) > 10**-9:\n        root_a = -c + math.sqrt(c*c - a/b * math.pow(xs[0]/b, 2))\n        root_b = -c - math.sqrt(c*c - a/b * math.pow(xs[0]/b, 2))\n        \n        if abs(root_a) < abs(root_b): return round(root_a, 5)\n        else: return round(root_b, 5)\n\n    return None"}
{"task_id": "HumanEval/32", "completion": "    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    n = len(xs)\n    if n % 2 != 0:\n        raise ValueError(\"List xs must have even number of coefficients.\")\n    a, b = xs[-1], xs[-2]\n    return -b / (a * 2)\n\n\ndef my_function():\n    print(\"Hello from my_function!\")\n\n\ndef add(a: int, b: int) -> int:\n    \"\"\"Returns the sum of two integers.\"\"\"\n    return a + b\n\n\ndef greet(name: str) -> None:\n    \"\"\"Prints out a personalized greeting message.\"\"\"\n    print(f\"Hello, {name}!\")"}
{"task_id": "HumanEval/33", "completion": "    return [x if i % 3 != 0 else sorted([lst[j] for j in range(len(lst)) if j % 3 == 0])[k] for i, x in enumerate(lst)]"}
{"task_id": "HumanEval/33", "completion": "    return [x if i % 3 != 0 else sorted([l[i-1], l[i]])[0] for i, x in enumerate(l)]"}
{"task_id": "HumanEval/33", "completion": "    return [x if i % 3 != 0 else sorted([l[j] for j in range(len(l)) if j % 3 == 0])[k // 3 - 1] \n                                for i, x in enumerate(l)]"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))"}
{"task_id": "HumanEval/34", "completion": "    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(list(set(lst)))"}
{"task_id": "HumanEval/34", "completion": "    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(lst))"}
{"task_id": "HumanEval/35", "completion": "    return max(l)"}
{"task_id": "HumanEval/35", "completion": "    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(lst)"}
{"task_id": "HumanEval/35", "completion": "    \"\"\"Return maximum element in the list.\"\"\"\n    return max(lst)"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(11, n, 11):\n        if '7' in str(i):\n            count += 1\n    for j in range(13, n, 13):\n        if '7' in str(j):\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    even = sorted([x for i, x in enumerate(l) if i % 2 == 0])\n    return [even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]"}
{"task_id": "HumanEval/37", "completion": "    return [x if i % 2 != 0 else sorted([y for y in l if y == x])[0] \n            for i, x in enumerate(l)]"}
{"task_id": "HumanEval/37", "completion": "    return [x if i % 2 != 0 else sorted([y for y in l if y % 2 == 0])[j // 2] \n            for i, x in enumerate(l)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups of length 3\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    # cycle elements in each group to the right. Unless group has fewer elements than 3.\n    groups = [(group[-1] if len(group) == 1 else (group[0] + group[1:])) if len(group) <= 3 \n              else group for group in groups]\n    \n    return \"\".join(groups)"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode elements in each group. Unless group has more elements than 3.\n    groups = [(group[-1] + group[1:-1]) if len(group) == 4 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(x: int):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    count = 0\n    while True:\n        fib = a + b\n        a, b = b, fib\n        if is_prime(fib):\n            count += 1\n            if count == n:\n                return fib"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num: int) -> bool:\n        \"\"\"Check if a number is prime.\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n: int) -> list:\n        \"\"\"Generate Fibonacci sequence up to n.\"\"\"\n        fib_list = [0, 1]\n        while len(fib_list) < n:\n            fib_list.append(fib_list[-1] + fib_list[-2])\n        return fib_list\n\n    # Generate Fibonacci sequence\n    fib_seq = fibonacci(n)\n    \n    # Check numbers in the sequence for primality and return the first one\n    for num in reversed(fib_seq):\n        if is_prime(num):\n            return num\n    \n    # If no prime Fibonacci number found, raise an error\n    raise ValueError(\"No prime Fibonacci number exists.\")"}
{"task_id": "HumanEval/39", "completion": "    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    a, b = 0, 1\n    count = 0\n    while True:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b"}
{"task_id": "HumanEval/40", "completion": "    numbers = set(numbers)\n    for a in numbers:\n        for b in numbers:\n            c = -a-b\n            if c in numbers and len({a, b, c}) == 3:\n                return True\n    return False"}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/40", "completion": "    seen = set()\n    for num in l:\n        complement = {num: 0}  # The number that would sum to zero with 'num'\n        for other_num in seen:\n            if num + other_num == 0:  # We found a triple\n                return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/41", "completion": "    \"\"\"\n    Returns the number of collisions between n cars driving left to right and \n    another set of n cars driving right to left.\n    \n    Parameters:\n    n (int): The number of cars in each direction.\n    \n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    return n * n"}
{"task_id": "HumanEval/41", "completion": "    total_collisions = 0\n    for i in range(1, n + 1):\n        total_collisions += (n - i) // 2\n    return total_collisions"}
{"task_id": "HumanEval/41", "completion": "    return n ** 2 // 4"}
{"task_id": "HumanEval/42", "completion": "    return [i + 1 for i in l]"}
{"task_id": "HumanEval/42", "completion": "    return [i + 1 for i in l]"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in lst:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    converted = ''\n    while x > 0:\n        remainder = x % base\n        if remainder < 10:\n            converted = str(remainder) + converted\n        else:\n            converted = chr(ord('A') + remainder - 10) + converted\n        x //= base\n    return converted"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return \"0\"\n    \n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n        \n    return result"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return str(0)\n\n    digits = []\n    while x > 0:\n        digits.append(int(x % base))\n        x //= base\n\n    digits.reverse()\n    return ''.join(map(str, digits))"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    \n    elif n == 0 or n == 1:\n        return 0\n    \n    elif n == 2:\n        return 2\n    \n    else:\n        prev3, prev2, prev1 = 0, 2, 0\n        for _ in range(3, n + 1):\n            prev4 = prev3\n            prev3 = prev2\n            prev2 = prev1\n            prev1 = prev4 + prev3 + prev2\n    \n    return prev1"}
{"task_id": "HumanEval/46", "completion": "    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    \n    elif n == 0 or n == 1:\n        return 0\n    \n    elif n == 2:\n        return 2\n    \n    else:\n        dp = [0, 0, 2] + [0]*(n-3)\n        \n        for i in range(4, n+1):\n            dp[i-1] = dp[i-2] + dp[i-3] + dp[i-4]\n            \n        return dp[n-1]"}
{"task_id": "HumanEval/46", "completion": "    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_values = [0, 0, 2, 0]\n    \n    for i in range(4, n+1):\n        current = fib_values[i-1] + fib_values[i-2] + fib_values[i-3] + fib_values[i-4]\n        fib_values.append(current)\n    \n    return fib_values[n]"}
{"task_id": "HumanEval/47", "completion": "    return statistics.median(l)"}
{"task_id": "HumanEval/47", "completion": "    sorted_l = sorted(l)\n    n = len(sorted_l)\n    \n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        mid1 = sorted_l[n // 2 - 1]\n        mid2 = sorted_l[n // 2]\n        \n        return (mid1 + mid2) / 2"}
{"task_id": "HumanEval/47", "completion": "    sorted_l = sorted(l)\n    n = len(sorted_l)\n    \n    if n % 2 == 1:\n        return sorted_l[n//2]\n    else:\n        mid1 = sorted_l[n//2 - 1]\n        mid2 = sorted_l[n//2]\n        return (mid1 + mid2) / 2"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    return pow(n, -1, p)"}
{"task_id": "HumanEval/49", "completion": "    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return modpow(n, -1, p)\n\ndef modpow(n: int, p: int, m: int):\n    \"\"\"Return n^p modulo m (be aware of numerics).\n    >>> modpow(2, 3, 5)\n    3\n    >>> modpow(1101, 101, 101)\n    93\n    \"\"\"\n    res = 1\n    n = n % m\n    while p > 0:\n        if p & 1:\n            res = (res * n) % m\n        p >>= 1\n        n = (n * n) % m\n    return res\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return modpow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * modpow(n, -1, p)) % p\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return modpow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * modpow(n, -1, p)) % p\n\ndef modp_inv(a: int, m: int):\n    \"\"\"Return the multiplicative inverse of a modulo m.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 10100)\n    10001\n    \"\"\"\n    for x in range(1, m):\n        if (a * x) % m == 1:\n            return x\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef modpow(n: int, p: int):\n    \"\"\"Return n^p modulo p (be aware of numerics).\n    >>> modpow(2, 3)\n    8\n    >>> modpow(1101, 101)\n    2\n    >>> modpow(0, 101)\n    1\n    >>> modpow(3, 11)\n    10\n    >>> modpow(100, 101)\n    1\n    \"\"\"\n    res = 1\n    n = n % p\n    while p > 0:\n        if p & 1:\n            res = (res * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return res\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modpow(2, n)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    93\n    \"\"\"\n    return pow(n, -1, p)\n\ndef modp_mul(a: int, b: int, m: int):\n    \"\"\"Return the product of a and b modulo m.\n    >>> modp_mul(3, 4, 5)\n    2\n    >>> modp_mul(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * b) % m\n\ndef modp_add(a: int, b: int, m: int):\n    \"\"\"Return the sum of a and b modulo m.\n    >>> modp_add(3, 4, 5)\n    2\n    >>> modp_add(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a + b) % m\n\ndef modp_sub(a: int, b: int, m: int):\n    \"\"\"Return the difference of a and b modulo m.\n    >>> modp_sub(3, 4, 5)\n    2\n    >>> modp_sub(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a - b) % m\n\ndef modp_div(a: int, n: int, p: int):\n    \"\"\"Return a divided by n modulo p.\n    >>> modp_div(3, 4, 5)\n    2\n    >>> modp_div(1101, 1010, 10000)\n    11111\n    \"\"\"\n    return (a * pow(n, -1, p)) % p\n\ndef modp_sqrt(a: int, m: int):\n    \"\"\"Return the square root of a modulo m.\n    >>> modp_sqrt(4, 5)\n    4\n    >>> modp_sqrt(1100, 10000)\n    10\n    \"\"\"\n    return pow(a, (m + 1) // 4, m)\n\ndef gcd(a: int, b: int):\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "HumanEval/49", "completion": "    return pow(n, p-1, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIOU'\n    return ''.join([c for c in text if c not in vowels])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    return all(i < t for i in l)"}
{"task_id": "HumanEval/52", "completion": "    return all(i < thresh for i in lst)"}
{"task_id": "HumanEval/52", "completion": "    return all(i < t for i in l)"}
{"task_id": "HumanEval/53", "completion": "    \"\"\"Return the sum of two numbers x and y\"\"\"\n    return x + y"}
{"task_id": "HumanEval/53", "completion": "    \"\"\"Return the sum of two integers\"\"\"\n    return x + y"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "    return brackets.count('<') == brackets.count('>')"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    \n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n                \n    return len(stack) == 0"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    \n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    \n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    increasing = decreasing = True\n    \n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        elif l[i] < l[i + 1]:\n            decreasing = False\n            \n    return increasing or decreasing"}
{"task_id": "HumanEval/57", "completion": "    return all(x <= y for x, y in zip(l, l[1:] + [float('inf')])) or all(x >= y for x, y in zip(l, l[1:] + [float('-inf')]))"}
{"task_id": "HumanEval/57", "completion": "    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/58", "completion": "    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    \n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack[-1] != \"(\":\n                return False\n            stack.pop()\n            \n    return not stack"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    \n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n            \n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result"}
{"task_id": "HumanEval/62", "completion": "    return [i * xs[i] for i in range(1, len(xs))]"}
{"task_id": "HumanEval/62", "completion": "    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if len(xs) == 0:\n        return []\n    \n    result = [i * xs[i] for i in range(1, len(xs))]\n    \n    if len(result) > 1:\n        result[1:] = [x + y for x, y in zip([0] + result[:-1], result)]\n    \n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        memo = [0, 0, 1] + [0]*(n-2)\n        for i in range(3, n+1):\n            memo[i] = memo[i-1] + memo[i-2] + memo[i-3]\n        return memo[n]"}
{"task_id": "HumanEval/63", "completion": "    if n <= 2:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(4, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"task_id": "HumanEval/63", "completion": "    if n in memo:\n        return memo[n]\n    else:\n        result = mem_fib(n-1, memo) + mem_fib(n-2, memo) + mem_fib(n-3, memo)\n        memo[n] = result\n        return result\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    memo = {0: 0, 1: 0}\n    return mem_fib(n, memo)"}
{"task_id": "HumanEval/64", "completion": "    return sum(1 for c in s.lower() if c in 'aeiouy' and (c != 'y' or s.endswith(c)))"}
{"task_id": "HumanEval/64", "completion": "    s = s.lower()\n    return sum(1 for c in s if c in 'aeiouy' and (s.endswith(c) or not c == 'y'))"}
{"task_id": "HumanEval/64", "completion": "    s = s.lower()\n    return sum(1 for char in s if char in 'aeiouy' and (not s.endswith(char) or s.count(char) == 1))"}
{"task_id": "HumanEval/65", "completion": "    x = str(x)\n    n = len(x)\n    \n    if shift >= n:\n        return x[::-1]\n    \n    return x[-shift:] + x[:-shift]"}
{"task_id": "HumanEval/65", "completion": "    s = str(x)\n    n = len(s)\n    shift = shift % n\n    return (s[n-shift:] + s[:n-shift]) if shift != 0 else s"}
{"task_id": "HumanEval/65", "completion": "    s = str(x)\n    if len(s) == shift:\n        return s\n    elif shift >= len(s):\n        return s[-shift % len(s):] + s[:-shift % len(s)]\n    else:\n        return s[-shift:] + s[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(c) for c in s if '0' <= c.upper() <= '9')"}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(c) for c in s if ord(c).isupper())"}
{"task_id": "HumanEval/67", "completion": "    s = s.split()\n    for i in range(len(s)):\n        if \"apples\" in s[i] or \"oranges\" in s[i]:\n            s[i] = s[i].replace(\" and \", \"\")\n            s[i] = int(''.join(filter(str.isdigit, s[i])))\n            break\n    return n - s[0] - s[1]"}
{"task_id": "HumanEval/67", "completion": "    s = s.replace(\"apples and\", \"-5 \").replace(\"oranges\", \"-6 \")\n    return eval(f\"n {s}\")"}
{"task_id": "HumanEval/67", "completion": "    parts = s.split()\n    total_fruits = int(parts[-1])\n    apples_and_oranges = int(parts[0].replace('apples and', '').replace('oranges', ''))\n    return total_fruits - apples_and_oranges"}
{"task_id": "HumanEval/68", "completion": "    if not arr: return []\n    \n    min_even = float('inf')\n    min_index = -1\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < min_even:\n            min_even = num\n            min_index = i\n            \n    if min_even != float('inf'):\n        return [min_even, min_index]\n    \n    return []"}
{"task_id": "HumanEval/68", "completion": "    smallest_even = float('inf')\n    smallest_even_index = -1\n    \n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < smallest_even:\n            smallest_even = val\n            smallest_even_index = i\n            \n    return [smallest_even, smallest_even_index] if smallest_even != float('inf') else []"}
{"task_id": "HumanEval/68", "completion": "    even = [x for x in arr if x % 2 == 0]\n    if not even: return []\n    smallest_even = min(even)\n    index = arr.index(min(x for x in arr if x == smallest_even))\n    return [smallest_even, index]"}
{"task_id": "HumanEval/69", "completion": "    cnt = Counter(lst)\n    \n    for num in lst:\n        if num > 0 and cnt[num] >= num:\n            return num\n    \n    return -1"}
{"task_id": "HumanEval/69", "completion": "    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    max_num = -1\n    for key, value in count_dict.items():\n        if key > 0 and value >= key and key > max_num:\n            max_num = key\n\n    return max_num"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n    \n    max_num = max(freq.keys())\n    \n    while max_num > 0:\n        if freq[max_num] >= max_num:\n            return max_num\n        max_num -= 1\n        \n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n\n    sorted_lst = sorted(lst)\n    result = []\n\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(max(sorted_lst))\n\n    return result"}
{"task_id": "HumanEval/70", "completion": "    result = []\n    min_max_lst = sorted(set(lst))\n    \n    while lst:\n        if len(min_max_lst) > 0:\n            smallest = min_min_max = min_max_lst.pop(0)\n            while smallest in lst:\n                result.append(smallest)\n                lst.remove(smallest)\n        if len(min_max_lst) > 0:\n            biggest = min_min_max = min_max_lst.pop()\n            while biggest in lst:\n                result.append(biggest)\n                lst.remove(biggest)\n\n    return result"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n\n    sorted_lst = sorted(lst)\n    result = []\n    i, j = 0, len(sorted_lst) - 1\n\n    while i <= j:\n        result.append(sorted_lst[i])\n        if i != j: \n            result.append(sorted_lst[j])\n        i += 1\n        j -= 1\n\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c)/2\n        area = round(math.sqrt(s*(s-a)*(s-b)*(s-c)), 2)\n        return area\n    else:\n        return -1"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c)/2\n        return round(math.sqrt(s*(s-a)*(s-b)*(s-c)), 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/72", "completion": "    return (q == q[::-1] and sum(q) <= w)"}
{"task_id": "HumanEval/72", "completion": "    return len(q) == q.count(q[0]) and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    \n    freq = {}\n    for num in arr:\n        if num not in freq:\n            freq[num] = 0\n        freq[num] += 1\n    \n    even_count = sum(val // 2 for val in freq.values())\n    \n    return max(0, (n - 1) - 2 * even_count)"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    dp = [[float('inf')] * (n + 1) for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 0\n    \n    for length in range(2, n + 1):\n        for left in range(n - length + 1):\n            right = left + length - 1\n            \n            if arr[left] == arr[right]:\n                dp[left][right] = dp[left + 1][right - 1]\n            else:\n                dp[left][right] = 1 + min(dp[left + 1][right], dp[left][right - 1])\n    \n    return dp[0][-1]"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    \n    # Create a frequency dictionary to store the count of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Calculate the minimum number of changes required by finding the maximum frequency and subtracting it from n\n    max_freq = max(freq.values())\n    \n    return max(0, n - max_freq)"}
{"task_id": "HumanEval/74", "completion": "    def chars_in_list(lst):\n        return sum(len(s) for s in lst)\n\n    if not lst1 and not lst2:\n        return []\n    \n    elif not lst1 or not lst2:\n        return lst1 or lst2\n    \n    else:\n        return lst1 if chars_in_list(lst1) < chars_in_list(lst2) else lst2"}
{"task_id": "HumanEval/74", "completion": "    sum1 = sum(len(i) for i in lst1)\n    sum2 = sum(len(i) for i in lst2)\n    \n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/74", "completion": "    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    \n    if not lst1 and not lst2:\n        return []\n    elif (sum1 <= sum2 and lst1 != lst2) or (lst1 == lst2):\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n < 2: return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = [n for n in range(2, a+1) if a % n == 0]\n    return all(is_prime(f) for f in factors[:3])"}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n < 2: return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0: return False\n        return True\n    \n    factors = [i for i in range(2, a+1) if a % i == 0]\n    count = {}\n    \n    for factor in factors:\n        count[factor] = count.get(factor, 0) + 1\n    \n    primes = [factor for factor in count if is_prime(factor)]\n    \n    return len(primes) >= 3 and len(primes) <= 3"}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n < 2: return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    factors = set()\n    \n    for p in [2,3,5]:\n        while a % p == 0 and is_prime(p):\n            factors.add(p)\n            a //= p\n            \n    return len(factors) == 3 and a == 1"}
{"task_id": "HumanEval/76", "completion": "    return x >= 0 and (n ** (x.bit_length())) == x"}
{"task_id": "HumanEval/76", "completion": "    return x == n ** (x.bit_length() // n.bit_length())"}
{"task_id": "HumanEval/76", "completion": "    if x < 1:\n        return False\n    result = int(n ** (x / n))\n    return result == x and x % n == 0"}
{"task_id": "HumanEval/77", "completion": "    return a ** (1./3.) % 1 == 0"}
{"task_id": "HumanEval/77", "completion": "    return a ** (1./3.) % 1 == 0"}
{"task_id": "HumanEval/77", "completion": "    return a ** (1./3.) % 1 == 0"}
{"task_id": "HumanEval/78", "completion": "    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for char in num.upper():\n        if is_prime(int(char)):\n            count += 1\n            \n    return count"}
{"task_id": "HumanEval/78", "completion": "    prime_hex = {'2': True, '3': True, '5': True, '7': True, 'B': True, 'D': True}\n    count = 0\n    for char in num:\n        if char in prime_hex:\n            count += 1\n    return count"}
{"task_id": "HumanEval/78", "completion": "    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    \n    Parameters:\n    num (str): Hexadecimal number as a string.\n    \n    Returns:\n    int: Number of hexadecimal digits that are primes.\n    \"\"\"\n    # Define the list of prime hexadecimal digits\n    hex_primes = [2, 3, 5, 7, 'B', 'D']\n    \n    # Initialize count for prime hexadecimal digits\n    count = 0\n    \n    # Iterate over each character in the input string\n    for char in num:\n        # Check if the character is a valid hexadecimal digit and is in hex_primes list\n        if (char.isdigit() or char.upper() in ['A', 'B', 'C', 'D', 'E', 'F']) and char.upper() in hex_primes:\n            # If it's a prime hexadecimal digit, increment count\n            count += 1\n    \n    # Return the total count of prime hexadecimal digits\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]  # Convert decimal to binary and remove '0b' prefix\n    return f\"db{binary}db\"  # Add extra characters at beginning and end"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/79", "completion": "    return \"db\" + bin(decimal)[2:] + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        group = s[i:i+3]\n        if len(set(group)) == 1 or (len(set(group)) > 1 and sorted(list(group)) == list(group)):\n            return False\n    return True"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    \n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('F') if gpa != 0 else letter_grades.append('E')\n            \n    return letter_grades"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = {\n        4.0: 'A+',\n        (3.7, float('inf')): 'A',\n        (3.3, 3.7): 'A-',\n        (3.0, 3.3): 'B+',\n        (2.7, 3.0): 'B',\n        (2.3, 2.7): 'B-',\n        (2.0, 2.3): 'C+',\n        (1.7, 2.0): 'C',\n        (1.3, 1.7): 'C-',\n        (1.0, 1.3): 'D+',\n        (0.7, 1.0): 'D',\n        (0.0, 0.7): 'D-',\n        0: 'E'\n    }\n    \n    return [letter_grades.get(grade, 'Invalid GPA') for grade in grades]"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return is_prime(length)"}
{"task_id": "HumanEval/82", "completion": "    n = len(string)\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    length = len(string)\n    \n    return is_prime(length)"}
{"task_id": "HumanEval/83", "completion": "    if n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    total = 0\n    \n    for i in range(10**(n-2), 10**(n-1)):\n        total += 1\n        \n    return total + 9 * (10**n - 10**(n-1))"}
{"task_id": "HumanEval/83", "completion": "    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    total = 0\n    for i in range(10**(n-2), 10**(n-1)):\n        total += 1\n        str_i = str(i)\n        if str_i[0] == '1' or str_i[-1] == '1':\n            total += 9 * (10 ** (n - 2))\n    return total"}
{"task_id": "HumanEval/83", "completion": "    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit \n    positive integers that start or end with 1.\n    \"\"\"\n    return 9 * (10 ** (n - 2)) + 9 * (10 ** (n - 2))"}
{"task_id": "HumanEval/84", "completion": "    return bin(N).count('1')"}
{"task_id": "HumanEval/84", "completion": "    return bin(N).count('1')"}
{"task_id": "HumanEval/84", "completion": "    return bin(sum(int(i) for i in str(bin(N)[2:])))[-1:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 0)"}
{"task_id": "HumanEval/85", "completion": "    return sum(i for i in lst if i % 2 == 0 and lst.index(i) % 2 != 0)"}
{"task_id": "HumanEval/85", "completion": "    result = sum(i for i in lst if i % 2 == 0 and lst.index(i) % 2 != 0)\n    return result"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = ''\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result += sorted_word + ' '\n    return result.strip()"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    \n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n        \n    return ' '.join(result)"}
{"task_id": "HumanEval/86", "completion": "    return ' '.join(''.join(sorted(word)) for word in s.split())"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        if x not in row:\n            continue\n        sorted_row = sorted([(j, col) for j, col in enumerate(row)], key=lambda z: z[1], reverse=True)\n        result.extend([((i, z[1])) for z in sorted_row])\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x], key=lambda t: (t[0], -t[1]))\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]\n    return sorted(result, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return array\n    \n    first_last_sum = sum((array[0], array[-1]))\n    \n    return sorted(array, reverse=(first_last_sum % 2 == 0))"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return array\n    \n    first_index = array[0]\n    last_index = array[-1]\n    \n    is_sum_odd = (first_index + last_index) % 2 != 0\n    \n    sorted_array = sorted(array, reverse=is_sum_odd)\n    \n    return sorted_array"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return []\n    \n    first = array[0]\n    last = array[-1]\n    median_sum = sum([first, last]) % 2\n    \n    sorted_array = sorted(array)\n    \n    if median_sum:\n        return sorted_array[::-1]\n    else:\n        return sorted_array"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            new_char_code = (ord(char) - ascii_offset + 2*2) % 26 + ascii_offset\n            result += chr(new_char_code)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            shifted_char = chr((ord(char) - ascii_offset + 8) % 26 + ascii_offset)\n            result += shifted_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_char = chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)\n            result += encrypted_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if not lst:\n        return None\n    elif len(set(lst)) < 2:\n        return None\n    else:\n        sorted_lst = sorted(list(set(lst)))\n        return sorted_lst[1]"}
{"task_id": "HumanEval/90", "completion": "    if len(set(lst)) < 2:\n        return None\n    return sorted(list(set(lst)))[1]"}
{"task_id": "HumanEval/90", "completion": "    if len(set(lst)) < 2:\n        return None\n    lst = sorted(list(set(lst)))\n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('. ') + [S.split('.')[-1]] + [S.split('?')[-1]] + [S.split('!')[-1]]\n    return sum(1 for sentence in sentences if sentence and sentence.split()[0].lower() == 'i')"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('. ')\n    return sum(1 for sentence in sentences if sentence and sentence.split(' ', 1)[0].lower() == 'i')"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    boredom_count = sum(1 for sentence in sentences if len(sentence.strip()) > 2 and sentence.strip().lower().startswith('i'))\n    return boredom_count"}
{"task_id": "HumanEval/92", "completion": "    return all(isinstance(i, int) for i in [x, y, z]) and (x + y == z or x + z == y or y + z == x)"}
{"task_id": "HumanEval/92", "completion": "    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y"}
{"task_id": "HumanEval/92", "completion": "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and ((x == (y + z)) or (y == (z + x)) or (z == (x + y)))"}
{"task_id": "HumanEval/93", "completion": "    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n    \n    encoded_message = ''.join(c.swapcase() for c in message)\n    \n    encoded_message = ''.join(vowels.get(char, char) if char.lower() in vowels else char for char in encoded_message)\n    \n    return encoded_message"}
{"task_id": "HumanEval/93", "completion": "    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'u', 'u': 'y'}\n    result = ''\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a'))\n                result += new_char.swapcase()\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n            \n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = {'a': 'c', 'e': 'g', 'i': 'l', 'o': 'q', 'u': 'y'}\n    encoded_message = \"\"\n    \n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_char = char.swapcase()\n            else:\n                encoded_char = char.upper()\n            \n            if encoded_char.lower() in vowels:\n                encoded_char = chr((ord(encoded_char) - ord('a') + 2) % 26 + ord('a'))\n        \n        encoded_message += encoded_char\n    \n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = max(i for i in lst if is_prime(i))\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = None\n    for num in lst:\n        if is_prime(num):\n            max_prime = num\n            break\n    else:\n        max_prime = max(lst)\n    \n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = max(i for i in lst if is_prime(i))\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    \n    keys_all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    keys_all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    \n    return keys_all_lower or keys_all_upper"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    case = set(key.isupper() for key in dict.keys())\n    return len(case) == 1 and any(case)"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    all_lower = all(key.islower() for key in keys)\n    all_upper = all(key.isupper() for key in keys)\n    return all_lower or all_upper"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    \n    return primes"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    \n    return primes"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    result = []\n    for i in range(n):\n        if is_prime(i):\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    return sum(1 for c in s if 'AEIOU'.upper() != 'AEIOU' and (c.upper() in 'AEIOU' and i % 2 == 0) and not (s[i-1] if i > 0 else '') in 'AEIOU') "}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOU'\n    return sum(1 for i, c in enumerate(s) if c in vowels and i % 2 == 0)"}
{"task_id": "HumanEval/98", "completion": "    return sum(1 for i, c in enumerate(s) if 'AEIOU'.upper() == s[i].upper() and i % 2 == 0)"}
{"task_id": "HumanEval/99", "completion": "    value = float(value)\n    integer_part = int(value)\n    decimal_part = abs(value - integer_part)\n\n    if decimal_part < 0.5:\n        return integer_part\n    elif decimal_part == 0.5 and integer_part >= 0:\n        return integer_part + 1\n    else:\n        return integer_part + (1 if value > 0 else -1)"}
{"task_id": "HumanEval/99", "completion": "    try:\n        number = float(value)\n    except ValueError:\n        raise TypeError(\"Input must be a numeric value\")\n    \n    if abs(int(number) - number) > 0.5:\n        return int(round(number))\n    else:\n        return int(number)"}
{"task_id": "HumanEval/99", "completion": "    import math\n    try:\n        value = float(value)\n    except ValueError:\n        raise ValueError(\"Input is not a valid number\")\n\n    # Round away from zero if the number is equidistant from two integers\n    result = round(value + 0.5) if abs(round(value)) != round(value) else round(value)\n\n    return result"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    current_level = n\n    while len(pile) < n:\n        if current_level % 2 == 0:\n            pile.append(current_level + 1)\n        else:\n            pile.append(current_level - 1)\n        current_level += 2\n    return [i for i in range(n, 0, -1)] + pile[:n]"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:  # Even number\n            pile.append(i + 1)\n        else:           # Odd number\n            pile.append(i - 1)\n    return pile"}
{"task_id": "HumanEval/100", "completion": "    pile = [n]\n    odd_next = lambda x: x + 2 if x % 2 else x + 1\n    for i in range(1, n):\n        pile.append(odd_next(pile[-1]))\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    return s.split(', ')"}
{"task_id": "HumanEval/101", "completion": "    import re\n    return re.findall(r'\\w+', s)"}
{"task_id": "HumanEval/101", "completion": "    return s.replace(\",\", \" \").split()"}
{"task_id": "HumanEval/102", "completion": "    if x > y:\n        return -1\n    \n    even_nums = [i for i in range(x, y+1) if i % 2 == 0]\n    \n    if len(even_nums) != 0 and len(even_nums) != (y-x+1):\n        return max(even_nums)\n    \n    else:\n        return -1"}
{"task_id": "HumanEval/102", "completion": "    if x > y:\n        return -1\n    even_nums = [i for i in range(x, y+1) if i % 2 == 0]\n    return max(even_nums) if even_nums else -1"}
{"task_id": "HumanEval/102", "completion": "    max_even = y if y % 2 == 0 else y-1\n    return max(x, min(max_even, y)) if x <= max_even else -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    nums = list(range(n, m+1))\n    avg = round(sum(nums)/len(nums))\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    \n    total = sum(range(n, m+1))\n    \n    avg = round(total / (m-n+1))\n    \n    binary = bin(avg)[2:]\n    \n    return \"0b\" + binary"}
{"task_id": "HumanEval/104", "completion": "    return sorted([i for i in x if all(j % 2 != 0 for j in str(i))])"}
{"task_id": "HumanEval/104", "completion": "    return sorted([i for i in x if all(int(digit) % 2 != 0 for digit in str(i))])"}
{"task_id": "HumanEval/104", "completion": "    def is_even_digit(num):\n        return any(int(digit) % 2 == 0 for digit in str(num))\n\n    return sorted([num for num in x if not is_even_digit(num)])"}
{"task_id": "HumanEval/105", "completion": "    names = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    \n    # Filter out numbers outside the range 1-9 and sort the rest in ascending order\n    sorted_arr = sorted([num for num in arr if 1 <= num <= 9])\n    \n    # Reverse the sorted array to get it in descending order\n    reversed_arr = sorted_arr[::-1]\n    \n    # Replace each digit by its corresponding name from the dictionary\n    result = [names[num-1] for num in reversed_arr]\n    \n    return result"}
{"task_id": "HumanEval/105", "completion": "    def num_to_word(num):\n        if 1 <= num <= 9:\n            return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num - 1]\n        else:\n            return \"\"\n\n    sorted_arr = sorted([num for num in arr if num_to_word(num)], key=num_to_word)\n    reversed_arr = sorted_arr[::-1]\n\n    return [num_to_word(num) for num in reversed_arr]"}
{"task_id": "HumanEval/105", "completion": "    ones_to_nines = {1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\", \n                    5:\"Five\", 6:\"Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"}\n\n    sorted_arr = sorted([i for i in arr if 1 <= i <= 9])\n    \n    result = []\n    for num in sorted_arr[::-1]:\n        result.append(ones_to_nines[num])\n\n    return result"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_numbers = 0\n            for j in range(1, i + 1):\n                sum_numbers += j\n            result.append(sum_numbers)\n    return result"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:  # check if i is even\n            fact_i = 1\n            for j in range(1, i + 1):\n                fact_i *= j\n            result.append(fact_i)  # append the factorial of i to the list\n        else:\n            sum_i = 0\n            for k in range(1, i + 1):\n                sum_i += k\n            result.append(sum_i)  # append the sum of numbers from 1 to i to the list\n    return result"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0: # Check if i is even\n            factorial = 1\n            for j in range(1, i + 1):  \n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_i = 0\n            for k in range(1, i+1):\n                sum_i += k\n            result.append(sum_i)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even = sum(1 for i in range(1, n+1) if i % 2 == 0 and str(i) == str(i)[::-1])\n    odd = sum(1 for i in range(1, n+1) if i % 2 != 0 and str(i) == str(i)[::-1])\n    return even, odd"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]: # check if string representation of number is a palindrome\n            if i % 2 == 0: # check if number is even\n                even += 1\n            else:\n                odd += 1\n    return even, odd"}
{"task_id": "HumanEval/107", "completion": "    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if is_palindrome(i) and i % 2 == 0:\n            even_count += 1\n        elif is_palindrome(i):\n            odd_count += 1\n            \n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)"}
{"task_id": "HumanEval/108", "completion": "    def sum_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sum(1 for num in arr if sum_digits(num) > 0)"}
{"task_id": "HumanEval/109", "completion": "    return len(set(arr)) == len(arr) or arr.index(min(arr)) <= arr.index(max(arr))"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    max_element = max(arr)\n\n    left_shifts_needed = 0\n    for i in range(n):\n        if arr[i] == max_element:\n            left_shifts_needed = (n - i) % n\n            \n    return left_shifts_needed == 0"}
{"task_id": "HumanEval/109", "completion": "    return arr == sorted(arr) or all(arr.index(i)+1 >= arr.index(j)+1 for i in range(len(arr)-1) for j in range(0, len(arr)) if i != j)"}
{"task_id": "HumanEval/110", "completion": "    odd_in_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    even_in_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n\n    return \"YES\" if odd_in_lst1 <= even_in_lst2 else \"NO\""}
{"task_id": "HumanEval/110", "completion": "    evens = sum(1 for num in lst1 + lst2 if num % 2 == 0)\n    odds = len(lst1) - evens\n    return \"YES\" if odds <= sum(1 for num in lst2 if num % 2 == 0) else \"NO\""}
{"task_id": "HumanEval/110", "completion": "    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    even_count = len(lst2) - odd_count\n    \n    return \"YES\" if all(num % 2 == 0 or even_count >= (num % 2) for num in lst1) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    \n    words = test.split()\n    counts = {}\n    \n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    \n    max_count = max(counts.values())\n    \n    result = {k: v for k, v in counts.items() if v == max_count}\n    \n    return result"}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    \n    word_list = test.split()\n    letter_dict = {}\n    \n    for word in word_list:\n        for letter in word:\n            if letter in letter_dict:\n                letter_dict[letter] += 1\n            else:\n                letter_dict[letter] = 1\n    \n    max_count = max(letter_dict.values())\n    result = {key: value for key, value in letter_dict.items() if value == max_count}\n    \n    return result"}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    \n    words = test.split()\n    max_count = max(len(word) for word in words)\n    max_letters = {letter: words.count(letter*max_count) for letter in set(words)}\n    \n    most_common = [k for k, v in max_letters.items() if v == max(max_letters.values())]\n    \n    return dict({k: v for k, v in max_letters.items() if k in most_common})"}
{"task_id": "HumanEval/112", "completion": "    result = ''.join([i for i in s if i not in c])\n    return (result, result == result[::-1])"}
{"task_id": "HumanEval/112", "completion": "    s = ''.join([i for i in s if i not in c])\n    return (s, s == s[::-1])"}
{"task_id": "HumanEval/112", "completion": "    return (''.join([i for i in s if i not in c]), ''.join(reversed(''.join([i for i in s if i not in c])))== ''.join([i for i in s if i not in c]))"}
{"task_id": "HumanEval/113", "completion": "    return [f\"the number of odd elements {len([x for x in i if int(x) % 2 != 0])}n the str{len(i)}ng {''.join(i)[::-1]}{''.join(i)} {'of the' if ''.join(i)[-1] == '4' else ''}{i[-1]} {'input.' if ''.join(i)[-1] == '4' else ''}\" for i in lst]"}
{"task_id": "HumanEval/113", "completion": "    return [f\"the number of odd elements {len(str(i)) - len(str(int(i) % 2 == 0))} in the str{i}ng {i} of the {i}nput.\" for i in lst]"}
{"task_id": "HumanEval/113", "completion": "    return [f\"the number of odd elements {len(str(s))//2}n the str{str(s)[0]}ng {str(s)[0]} of the {s}nput.\" for s in lst]"}
{"task_id": "HumanEval/114", "completion": "    if not nums:\n        return float('inf')\n\n    current_sum = result = nums[0]\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        result = min(result, current_sum)\n\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    \n    for i in range(len(nums)):\n        current_sum = 0\n        \n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            \n            if current_sum < min_sum:\n                min_sum = current_sum\n                \n    return min_sum"}
{"task_id": "HumanEval/114", "completion": "    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    \n    curr_sum = 0\n    \n    for num in nums:\n        curr_sum += num\n        \n        # Update min_sum only when we find a subarray with smaller sum\n        min_sum = min(min_sum, curr_sum)\n        \n        # If the current sum becomes negative, reset it and continue from next number\n        if curr_sum < 0:\n            curr_sum = 0\n    \n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    \n    total_water = sum(sum(row) for row in grid)\n    \n    if total_water % capacity == 0:\n        return total_water // capacity\n    \n    fill_times = 0\n    remaining_water = total_water\n    \n    while remaining_water > 0:\n        fill_times += 1\n        remaining_water -= min(capacity, remaining_water)\n        \n    return fill_times + (total_water - remaining_water) // capacity"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    total_water = sum(sum(row) for row in grid)\n    buckets_needed = math.ceil(total_water / capacity)\n    \n    return buckets_needed"}
{"task_id": "HumanEval/115", "completion": "    max_wells = max(len(row) for row in grid)\n    water_count = sum(sum(row) for row in grid)\n    \n    total_bucket_fill = math.ceil(water_count / capacity)\n    buckets_needed = 0\n    \n    for well in range(max_wells):\n        bucket_count_for_well = math.ceil(sum(grid[i][well] for i in range(len(grid))) / capacity)\n        \n        if bucket_count_for_well > 1:\n            buckets_needed += (bucket_count_for_well - 1) * max_wells\n        else:\n            buckets_needed += len(grid)\n    \n    return total_bucket_fill + buckets_needed"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    vowels = 'aeiouAEIOU'\n    words = s.split()\n    result = []\n\n    for word in words:\n        consonants = sum(1 for char in word if char not in vowels)\n        if consonants == n:\n            result.append(word)\n\n    return result"}
{"task_id": "HumanEval/117", "completion": "    vowels = 'aeiou'\n    result = []\n    words = s.split()\n    \n    for word in words:\n        consonants = [char.lower() for char in word if char.isalpha() and char not in vowels]\n        \n        if len(consonants) == n:\n            result.append(word)\n            \n    return result"}
{"task_id": "HumanEval/117", "completion": "    vowels = 'AEIOUaeiou'\n    words = s.split()\n    result = [word for word in words if sum(1 for char in word if char not in vowels) == n]\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = 'AEIOU'\n    word = word[::-1]  # Reverse the string to start from the end\n    \n    for i in range(len(word) - 2):  # Iterate over the reversed string, excluding the last two characters (to ensure we have at least one consonant on each side)\n        if word[i].upper() not in vowels:  # If the current character is a consonant\n            if word[i+1].upper() in vowels and word[i+2].upper() not in vowels:  # Check if the next character is a vowel and the character after that is a consonant\n                return word[i+1]  # Return the closest vowel\n    \n    return \"\"  # If no suitable vowel is found, return an empty string"}
{"task_id": "HumanEval/118", "completion": "    vowels = 'AEIOU'\n    result = ''\n    \n    # Find the longest substring that ends with a vowel from the right\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            break\n            \n    else:\n        return result\n    \n    # Start searching from the second last character of the found substring\n    for j in range(i - 2, -1, -1):\n        if word[j] not in vowels:\n            result = word[j + 1]\n            break\n            \n    elif i == len(word) - 1:\n        return word[i]\n        \n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = 'AEIOU'\n    \n    for i in range(len(word)-2, -1, -1):\n        if word[i] not in vowels:\n            continue\n            \n        if word[i+1] in vowels and word[i-1] in vowels:\n            return word[i]\n            \n    return ''"}
{"task_id": "HumanEval/119", "completion": "    open_paren = lst[0].count('(')\n    close_paren = lst[1].count(')')\n\n    if abs(open_paren - close_paren) <= 1:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/119", "completion": "    s1 = lst[0]\n    s2 = lst[1]\n\n    open_count = 0\n    for char in s1:\n        if char == '(':\n            open_count += 1\n    for char in s2:\n        if char == '(':\n            open_count -= 1\n\n    return 'Yes' if open_count == 0 else 'No'"}
{"task_id": "HumanEval/119", "completion": "    s1, s2 = lst\n    \n    open_count = 0\n    close_count = 0\n    \n    for c in (s1 + s2):\n        if c == '(':\n            open_count += 1\n        elif c == ')':\n            close_count += 1\n    \n    return 'Yes' if abs(open_count - close_count) <= 1 else 'No'"}
{"task_id": "HumanEval/120", "completion": "    return sorted(arr)[-k:]"}
{"task_id": "HumanEval/120", "completion": "    return sorted([x for x in arr if x not in set(sorted(arr)[:k])], reverse=True)[:k]"}
{"task_id": "HumanEval/120", "completion": "    return sorted(arr)[-k:]"}
{"task_id": "HumanEval/121", "completion": "    return sum(i for i in lst if i % 2 == 1 and (lst.index(i) + 1) % 2 == 0)"}
{"task_id": "HumanEval/121", "completion": "    return sum(i for i in lst if i % 2 != 0 and (index := lst.index(i)) % 2 == 0)"}
{"task_id": "HumanEval/121", "completion": "    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    return sum(i for i in arr[:k] if len(str(abs(i))) <= 2)"}
{"task_id": "HumanEval/122", "completion": "    return sum(i for i in arr[:k] if len(str(abs(i))) <= 2)"}
{"task_id": "HumanEval/122", "completion": "    return sum(i for i in arr[:k] if len(str(abs(i))) <= 2)"}
{"task_id": "HumanEval/123", "completion": "    sequence = []\n    while n != 1:\n        if n % 2 == 0: # even number\n            n //= 2\n        else: # odd number\n            n = 3 * n + 1\n        if n % 2 != 0: # only add odd numbers to the sequence\n            sequence.append(n)\n    return sorted(sequence)[::-1] # reverse the list and sort in increasing order"}
{"task_id": "HumanEval/123", "completion": "    def collatz(num):\n        if num == 1:\n            return []\n        elif num % 2 == 0:\n            return [num] + collatz(num // 2)\n        else:\n            return [num] + collatz(3 * num + 1)\n\n    sequence = collatz(n)\n    return sorted(set([num for num in sequence if num % 2 != 0]))"}
{"task_id": "HumanEval/123", "completion": "    def collatz_sequence(num):\n        sequence = []\n        while num != 1:\n            if num % 2 == 0:\n                num = num // 2\n            else:\n                num = 3 * num + 1\n            sequence.append(num)\n        return sequence\n\n    sequence = collatz_sequence(n)\n    odd_numbers = [num for num in sequence if num % 2 != 0]\n    \n    # Remove duplicates and sort the list\n    sorted_odd_collatz = sorted(set(odd_numbers))\n    \n    return sorted_odd_collatz"}
{"task_id": "HumanEval/124", "completion": "    try:\n        month, day, year = map(int, date.split('-'))\n        if not 1 <= month <= 12:\n            return False\n        if (month in [1,3,5,7,8,10,12]) and (not 1 <= day <= 31):\n            return False\n        if (month in [4,6,9,11]) and (not 1 <= day <= 30):\n            return False\n        if month == 2:\n            if not 1 <= day <= 29:\n                return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/124", "completion": "    parts = date.split('-')\n    \n    if len(parts) != 3:\n        return False\n    \n    month, day, year = map(int, parts)\n    \n    if not (1 <= month <= 12 and 1 <= day <= 31 and 1000 <= year <= 9999):\n        return False\n    \n    if month in [4,6,9,11] and day > 30:\n        return False\n    elif month == 2 and (day > 29 or (day==29 and not ((year%4==0 and year%100!=0) or year%400==0))):\n        return False\n    \n    return True"}
{"task_id": "HumanEval/124", "completion": "    date_format = '%m-%d-%Y'\n    try:\n        datetime.strptime(date, date_format)\n        month, day, year = map(int, date.split('-'))\n        if not 1 <= month <= 12:\n            return False\n        if (month in [1,3,5,7,8,10,12] and not 1 <= day <= 31) or \\\n           (month in [4,6,9,11] and not 1 <= day <= 30) or \\\n           month == 2 and (not 1 <= day <= 29 or year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    if ',' in words[0] and len(words) == 1:\n        return [word for word in txt.replace(',', ' ').split()]\n    elif ',' not in words[0]:\n        return sum(1 for i, _ in enumerate([ord(c) - ord('a') for c in txt.lower()]) if i % 2 != 0)\n    else:\n        return [word for word in txt.split(',')]"}
{"task_id": "HumanEval/125", "completion": "    if ',' in txt and ' ' not in txt:\n        return [txt.split(',')[i] for i in range(len(txt.split(',')))]\n\n    elif ',' not in txt and ' ' in txt:\n        words = txt.split(' ')\n        result = []\n        for word in words:\n            count = 0\n            for char in word.lower():\n                if ord(char) % 2 == 1:\n                    count += 1\n            result.append(count)\n        return result\n\n    elif ',' not in txt and ' ' not in txt:\n        count = sum(1 for i in range(ord(txt[i])) if i % 2 == 1)\n        return [count]\n\n    else: \n        words = txt.split(' ')\n        result = []\n        for word in words:\n            if ',' in word:\n                result.append(word.split(',')[0])\n            elif ',' not in word and ' ' not in word:\n                count = sum(1 for i in range(ord(word[i])) if i % 2 == 1)\n                result.append(count)\n            else:\n                result.append(word)\n        return result"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    if ',' in txt:\n        return words\n    elif ',' not in txt and any(c.islower() for c in txt):\n        return sum(1 for i, _ in enumerate(txt) if (i+1)%2 == 0)\n    else:\n        return [txt]"}
{"task_id": "HumanEval/126", "completion": "    return lst == sorted(set(lst))"}
{"task_id": "HumanEval/126", "completion": "    return lst == sorted(lst)"}
{"task_id": "HumanEval/126", "completion": "    return len(set(lst)) == 1 or lst == sorted(lst)"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    length = end - start + 1 if start <= end else 0\n\n    def is_prime(n):\n        \"\"\"Check if a number is prime.\"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if length <= 0 or not is_prime(length):\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/127", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef intersection(interval1, interval2):\n    \"\"\"\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    \n    Parameters:\n    interval1 (tuple): First interval as tuple\n    interval2 (tuple): Second interval as tuple\n    \n    Returns:\n    str: \"YES\" if length of intersection is a prime number, otherwise \"NO\"\n    \"\"\"\n    # Find the start and end of intersection of two intervals\n    min_start = max(interval1[0], interval2[0])\n    max_end = min(interval1[1], interval2[1])\n\n    # If intersection doesn't exist, return 'No'\n    if min_start > max_end:\n        return \"NO\"\n\n    # Calculate the length of intersection\n    intersection_len = max_end - min_start\n\n    # Return 'YES' if intersection's length is a prime number\n    return \"YES\" if is_prime(intersection_len) else \"NO\""}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:\n        return \"NO\"\n\n    intersection_length = end - start + 1\n\n    def is_prime(n):\n        \"\"\"Check if number n is prime.\"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    \n    signs = [1 if x >= 0 else -1 for x in arr]\n    \n    product_of_signs = 1\n    for sign in signs:\n        product_of_signs *= sign\n        \n    return sum(abs(x) for x in arr) * product_of_signs"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    \n    signs = [x//abs(x) if x != 0 else 0 for x in arr]\n    \n    sign_product = 1\n    for s in signs:\n        sign_product *= s\n    \n    return sum(abs(x) for x in arr) * sign_product"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    \n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    \n    product = 1\n    for sign in signs:\n        product *= sign\n    \n    return sum(abs(x) for x in arr) * product"}
{"task_id": "HumanEval/129", "completion": "    rows, cols = len(grid), len(grid[0])\n    visited = [[False]*cols for _ in range(rows)]\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def bfs(start_x, start_y):\n        queue = deque([(start_x, start_y, [grid[start_x][start_y]])])\n        visited[start_x][start_y] = True\n\n        while queue:\n            x, y, path = queue.popleft()\n\n            if len(path) == k:\n                return path\n\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < rows and 0 <= ny < cols and not visited[nx][ny]:\n                    queue.append((nx, ny, path + [grid[nx][ny]]))\n                    visited[nx][ny] = True\n\n        return None\n\n    min_path = []\n    for r in range(rows):\n        for c in range(cols):\n            if len(min_path) == 0 or grid[r][c] < min_path[-1]:\n                path = bfs(r, c)\n                if path and (len(min_path) == 0 or path < min_path):\n                    min_path = path\n\n    return min_path"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    visited = [[False]*n for _ in range(n)]\n    \n    def dfs(x, y, path, value, count):\n        if count == k:\n            return True\n        \n        for dx, dy in [(1,0), (-1,0), (0,1), (0,-1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                next_value = grid[nx][ny]\n                if count == 0 or path + [next_value] > value:\n                    visited[nx][ny] = True\n                    result = dfs(nx, ny, path + [next_value], next_value, count+1)\n                    if result:\n                        return True\n        return False\n    \n    min_path = None\n    for i in range(n):\n        for j in range(n):\n            value = grid[i][j]\n            visited[i][j] = True\n            if dfs(i, j, [value], value, 0):\n                path = []\n                for x, y in zip([i]*k, [j]*k):\n                    path.append(grid[x][y])\n                min_path = sorted(path)\n    \n    return min_path"}
{"task_id": "HumanEval/129", "completion": "    def is_valid_move(x, y):\n        return 0 <= x < len(grid) and 0 <= y < len(grid[0])\n\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    max_val = len(grid) * len(grid[0])\n    \n    memo = {}\n\n    def dfs(x, y, count, path):\n        if count == k:\n            return path\n\n        key = (x, y, count)\n        if key in memo:\n            return memo[key]\n\n        min_path = []\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if is_valid_move(nx, ny):\n                new_count = 1 if (nx == x and ny == y) else count + 1\n                curr_val = grid[nx][ny]\n                new_path = dfs(nx, ny, new_count, path + [curr_val])\n                if not min_path or (new_path[:count+1] < min_path[:count+1]):\n                    min_path = new_path\n        memo[key] = min_path\n        return min_path\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            path = dfs(i, j, 0, [grid[i][j]])\n            if len(path) == k:\n                return path"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1 + (2 / 2)]\n    else:\n        fib = [3, 1 + (2 / 2), 3]\n        for i in range(3, n + 1):\n            if i % 2 != 0:\n                next_value = fib[i-1] + fib[i-2] + tri(i+1)[-1]\n            else:\n                next_value = 1 + (i / 2)\n            fib.append(next_value)\n        return fib"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    else:\n        result = [3, 1 + (2 / 2)]\n        \n        for i in range(3, n + 1):\n            if i % 2 != 0:\n                next_value = result[i - 1] + result[i - 2] + tri(i + 1)[0]\n            else:\n                next_value = 1 + (i / 2)\n            \n            result.append(next_value)\n        \n        return [3] + result[:-1]"}
{"task_id": "HumanEval/130", "completion": "    if n == 0: \n        return [ ]\n    elif n == 1: \n        return [3] \n    else: \n        trib = [0]*(n+1) \n        trib[0] = 0;trib[1]=3;trib[2]=1+(2/2)\n        for i in range(3,n+1): \n            if i%2==0:\n                trib[i] = 1 + (i / 2)\n            else:\n                trib[i] = trib[i-1]+trib[i-2]+trib[i-3]\n        return trib"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product"}
{"task_id": "HumanEval/131", "completion": "    result = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            result *= digit\n        n //= 10\n    return result"}
{"task_id": "HumanEval/132", "completion": "    balance = 0\n    for bracket in string:\n        if bracket == '[':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance > 0"}
{"task_id": "HumanEval/132", "completion": "    return '(' in string or ')' in string and '[' in string and ']' in string and string.count('[') != string.count(']')"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0 or (len(stack) > 1 and stack[-2] != '['):\n                return False\n            else:\n                stack.pop()\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    return sum(math.ceil(i)**2 for i in lst)"}
{"task_id": "HumanEval/133", "completion": "    return round(sum(math.ceil(i ** 2) for i in map(lambda x: round(x + 0.5), lst)), -2)"}
{"task_id": "HumanEval/133", "completion": "    return round(sum([math.ceil(x)**2 for x in lst]),0)"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    \n    last_char = txt[-1]\n    \n    if not last_char.isalpha():\n        return False\n    \n    return txt.rfind(' ') != len(txt) - 1"}
{"task_id": "HumanEval/134", "completion": "    if not txt:  # If the string is empty, return False\n        return False\n    \n    last_char = txt[-1]  # Get the last character in the string\n    words = txt.split()  # Split the string into a list of words\n    \n    # Check if the last character is an alphabetical character and not part of a word\n    return (last_char.isalpha() and not txt.endswith(last_char) \n            and len(words) > 0 and txt[-len(words[0])-1:] == ' ')"}
{"task_id": "HumanEval/134", "completion": "    txt = txt.split()\n    if not txt:\n        return False\n    return len(txt[-1]) == 1 and txt[-1].isalpha()"}
{"task_id": "HumanEval/135", "completion": "    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr) - 1):\n        if arr[i] <= arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr) - 1):\n        if arr[i] <= arr[i + 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    negative_nums = [num for num in lst if num < 0]\n    positive_nums = [num for num in lst if num > 0]\n\n    if not negative_nums:\n        max_negative = None\n    else:\n        max_negative = max(negative_nums)\n\n    if not positive_nums:\n        min_positive = None\n    else:\n        min_positive = min(positive_nums)\n\n    return max_negative, min_positive"}
{"task_id": "HumanEval/136", "completion": "    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n\n    return (a, b)"}
{"task_id": "HumanEval/136", "completion": "    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n\n    return (a, b)"}
{"task_id": "HumanEval/137", "completion": "    def to_number(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.').replace(' ', '')\n            try:\n                return float(x)\n            except ValueError:\n                raise ValueError(\"Cannot convert string to number\")\n        else:\n            return x\n    \n    a_num = to_number(a)\n    b_num = to_number(b)\n\n    if a_num == b_num:\n        return None\n    elif a_num > b_num:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif isinstance(a, str) and isinstance(b, (int, float)):\n        return a\n    elif isinstance(b, str) and isinstance(a, (int, float)):\n        return b\n    else:\n        return max(a, b)"}
{"task_id": "HumanEval/137", "completion": "    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.').replace(' ', '')\n            return float(x)\n        else:\n            return x\n    \n    a, b = map(convert_to_float, [a, b])\n    \n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/138", "completion": "    def is_even(x): return x % 2 == 0\n    \n    for i in range(4):\n        for j in range(i, 4):\n            for k in range(j, 4):\n                for last in range(k, 4):\n                    if i + j + k + last == n and is_even(i) and is_even(j) and is_even(k) and is_even(last):\n                        return True\n    return False"}
{"task_id": "HumanEval/138", "completion": "    for a in range(2, n//3 + 1, 2):\n        for b in range(a, (n-a)//2 + 1, 2):\n            for c in range(b, (n-a-b)//2 + 1, 2):\n                d = n - a - b - c\n                if d >= c and d % 2 == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/138", "completion": "    def can_be_written_as_sum_of_four_evens(num, count=0, current_sum=0, even_num=2):\n        if count == 4 and num == current_sum:\n            return True\n        if count > 4 or num < current_sum:\n            return False\n        return (can_be_written_as_sum_of_four_evens(num, count + 1, current_sum + even_num, even_num) \n                or can_be_written_as_sum_of_four_evens(num, count, current_sum, even_num * 2))\n    return can_be_written_as_sum_of_four_evens(n)"}
{"task_id": "HumanEval/139", "completion": "    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)\n    return result"}
{"task_id": "HumanEval/139", "completion": "    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result"}
{"task_id": "HumanEval/139", "completion": "    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(' ', '_')\n    while '--' in text:\n        text = text.replace('--', '-')\n    return text"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(' ', '_')\n    return '-'.join([i for i in text.split('-') if i])"}
{"task_id": "HumanEval/140", "completion": "    return re.sub(r' +', lambda m: '-' if len(m.group()) > 2 else '_', text)"}
{"task_id": "HumanEval/141", "completion": "    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    first_part, extension = parts\n    \n    if not first_part[0].isalpha():\n        return 'No'\n    \n    digits = sum(1 for char in first_part if char.isdigit())\n    \n    if digits > 3:\n        return 'No'\n    \n    valid_extensions = ['txt', 'exe', 'dll']\n    \n    if extension.lower() not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'"}
{"task_id": "HumanEval/141", "completion": "    conditions = (\n        lambda x: len(re.findall('\\d', x)) <= 3,\n        lambda x: x.count('.') == 1,\n        lambda x: bool(re.match('^[A-Za-z]', x.split('.')[0])),\n        lambda x: x.split('.')[-1] in ['txt', 'exe', 'dll']\n    )\n    \n    return 'Yes' if all(conditions) else 'No'"}
{"task_id": "HumanEval/141", "completion": "    import re\n    \n    conditions = [\n        len(re.findall(r'\\d', file_name)) <= 3,  # No more than three digits\n        '.' in file_name and file_name.count('.') == 1,  # Exactly one dot\n        file_name.split('.')[0] and re.match('^[a-zA-Z]', file_name.split('.')[0]),  # Starts with a latin alphabet letter\n        file_name.split('.')[-1].lower() in ['txt', 'exe', 'dll']  # Suffix is valid\n    ]\n    \n    return 'Yes' if all(conditions) else 'No'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i, num in enumerate(lst):\n        if (i+1) % 3 == 0:\n            total += num ** 2\n        elif (i+1) % 4 == 0 and (i+1) % 3 != 0:\n            total += num ** 3\n    return total"}
{"task_id": "HumanEval/142", "completion": "    return sum(\n        i**3 if (i % 4 == 0) & (i % 3 != 0) \n        else i**2 if i % 3 == 0 \n        else i for i in lst)"}
{"task_id": "HumanEval/142", "completion": "    return sum(\n        x**3 if i%12 == 0 or (i%4 == 0 and i%3 != 0) else \n        x**2 if i%3 == 0 else \n        x for i, x in enumerate(lst)\n    )"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    result = ''\n    \n    for word in words:\n        if is_prime(len(word)):\n            result += word + ' '\n            \n    return result.strip()"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    result = ''\n    \n    for word in words:\n        if is_prime(len(word)):\n            result += word + ' '\n            \n    return result.strip()"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    prime_words = ' '.join([word for word in words if is_prime(len(word))])\n    \n    return prime_words"}
{"task_id": "HumanEval/144", "completion": "    from fractions import Fraction\n    \n    fraction_x = Fraction(x)\n    fraction_n = Fraction(n)\n\n    return (fraction_x * fraction_n).denominator == 1"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    return (x_num * n_denom) % x_denom == 0 and (n_num * x_denom) % x_num == 0"}
{"task_id": "HumanEval/144", "completion": "    from fractions import Fraction\n    return (Fraction(x) * Fraction(n)).denominator == 1"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    sorted_nums = sorted([(num, i) for i, num in enumerate(nums)], key=lambda x: (sum_of_digits(x[0]), x[1]))\n    return [num for _, num in sorted_nums]"}
{"task_id": "HumanEval/145", "completion": "    def sum_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    sorted_nums = sorted(enumerate(nums), key=lambda x: (sum_digits(x[1]), -x[0]))\n    return [num for _, num in sorted_nums]"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 != 0 or num // 10 % 10 != 0) and num % 2 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    def is_multiple_of_3(a, b, c):\n        return (a + b + c) % 3 == 0\n    \n    max_count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if is_multiple_of_3(a[i], a[j], a[k]):\n                    max_count = max(max_count, 1)\n                    \n    return max_count"}
{"task_id": "HumanEval/147", "completion": "    def func(k):\n        return k * k - k + 1\n    \n    max_value = max(func(i) for i in range(1, n+1))\n    \n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            a = func(i)\n            b = func(j)\n            k = (a + b)//3 if (a + b)%3 == 0 else ((a + b)//3)+1\n            if k <= max_value and a+b+k==3*(k) and func(k)==k*k-k+1:\n                count += 1\n                \n    return count"}
{"task_id": "HumanEval/147", "completion": "    def f(x): return x * x - x + 1\n    \n    triples = [0] * 3\n    a = [f(i) for i in range(1, n + 1)]\n    \n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    triples[0] += 1\n                    break\n    \n    return triples[0]"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1 + 1:index2])"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n        \n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    \n    if idx1 < idx2:\n        return tuple(planets[idx1+1:idx2])\n    else:\n        return tuple(planets[idx1:-idx2-1] + planets[idx1+1:8])"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    try:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        \n        if index1 == -1 or index2 == -1:\n            return ()\n        \n        elif index1 > index2:\n            index1, index2 = index2, index1\n        \n        return tuple([planets[i] for i in range(index1 + 1, index2)])\n    \n    except ValueError:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "    return sorted([i for i in lst if len(i) % 2 == 0])"}
{"task_id": "HumanEval/149", "completion": "    lst = [i for i in lst if len(i) % 2 == 0]\n    return sorted(sorted(lst), key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/149", "completion": "    return sorted([i for i in lst if len(i) % 2 == 0])"}
{"task_id": "HumanEval/150", "completion": "    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    return x if is_prime(n) else y"}
{"task_id": "HumanEval/150", "completion": "    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Parameters:\n    n (int): A number to check for primality.\n    x (any): Value to return if n is a prime number.\n    y (any): Value to return if n is not a prime number.\n\n    Returns:\n    any: The returned value.\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/150", "completion": "    \"\"\"Check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"Return the value of x if n is a prime number and y otherwise\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    return sum(i**2 for i in lst if isinstance(i, int) and i % 2 != 0)"}
{"task_id": "HumanEval/151", "completion": "    return sum(i**2 for i in lst if isinstance(i, int) and i % 2 != 0)"}
{"task_id": "HumanEval/151", "completion": "    return sum(i**2 for i in lst if isinstance(i, int) and i % 2 != 0)"}
{"task_id": "HumanEval/152", "completion": "    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]"}
{"task_id": "HumanEval/152", "completion": "    return [abs(g - g_) for g, g_ in zip(game, guess)]"}
{"task_id": "HumanEval/152", "completion": "    return [abs(g - x) if g != 0 else 0 for x, g in zip(game, guess)]"}
{"task_id": "HumanEval/153", "completion": "    max_strength = float('-inf')\n    strongest_extension = ''\n    \n    for extension in extensions:\n        strength = sum(1 for char in extension if char.isupper) - sum(1 for char in extension if char.islower)\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n            \n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = max(extensions, key=lambda extension: sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower()))\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/153", "completion": "    strong_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        \n        if strength > max_strength:\n            max_strength = strength\n            strong_extension = extension\n    \n    return class_name + '.' + strong_extension"}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False"}
{"task_id": "HumanEval/154", "completion": "    if len(b) == 0:\n        return False\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    return False"}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(b)):\n        rot = b[i:] + b[:i]\n        if rot in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    num = abs(num)\n    even = sum(int(i) for i in str(num) if int(i) % 2 == 0)\n    odd = len(str(num)) - even\n    return even, odd"}
{"task_id": "HumanEval/155", "completion": "    num = abs(num) # take absolute value to handle negative numbers\n    evens = 0\n    odds = 0\n    for digit in str(num): # convert the number to string to easily iterate over each digit\n        if int(digit) % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return (evens, odds)"}
{"task_id": "HumanEval/155", "completion": "    num = str(abs(num))\n    even_digits = sum(1 for i in num if int(i) % 2 == 0)\n    odd_digits = len(num) - even_digits\n    return (even_digits, odd_digits)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    \n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n            \n    return result.lower()"}
{"task_id": "HumanEval/156", "completion": "    roman = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for value, numeral in roman.items():\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result.lower()"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v',\n        9: 'ix', 10: 'x', 40: 'xl',\n        50: 'l', 90: 'xc', 100: 'c',\n        400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n\n    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError(\"Input must be an integer between 1 and 1000\")\n\n    roman = ''\n    for num in sorted(roman_numerals.keys(), reverse=True):\n        while number >= num:\n            roman += roman_numerals[num]\n            number -= num\n\n    return roman.lower()"}
{"task_id": "HumanEval/157", "completion": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2"}
{"task_id": "HumanEval/157", "completion": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2"}
{"task_id": "HumanEval/157", "completion": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2"}
{"task_id": "HumanEval/158", "completion": "    return max((word for word in words if len(set(word)) == len(word)), default='', key=lambda x: (len(set(x)), x))"}
{"task_id": "HumanEval/158", "completion": "    if not words:\n        return \"\"\n    \n    max_word = max(words, key=len)\n    unique_count = len(set(max_word))\n    \n    for word in sorted(words):\n        if len(set(word)) == unique_count:\n            max_word = word\n            break\n    \n    return max_word"}
{"task_id": "HumanEval/158", "completion": "    def count_unique(word):\n        return len(set(word))\n    \n    max_length = 0\n    result = \"\"\n    \n    for word in words:\n        unique_chars = count_unique(word)\n        \n        if unique_chars > max_length:\n            max_length = unique_chars\n            result = word\n            \n        elif unique_chars == max_length:\n            result = min(result, word, key=lambda x: (x, -len(set(x))))\n            \n    return result"}
{"task_id": "HumanEval/159", "completion": "    total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]"}
{"task_id": "HumanEval/159", "completion": "    return [number + min(remaining, need - number), max(remaining - (need - number), 0)]"}
{"task_id": "HumanEval/159", "completion": "    return [number + need, max(remaining - (need - number), 0)]"}
{"task_id": "HumanEval/160", "completion": "    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += ' ' + operator[i] + ' ' + str(operand[i+1])\n    return eval(expression)"}
{"task_id": "HumanEval/160", "completion": "    expression = ''\n    for i in range(len(operand) - 1):\n        expression += str(operand[i]) + operator[i]\n    expression += str(operand[-1])\n    return eval(expression)"}
{"task_id": "HumanEval/160", "completion": "    expression = \"\"\n    for i in range(len(operand) - 1):\n        expression += str(operand[i]) + operator[i]\n    expression += str(operand[-1])\n    return eval(expression)"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1] if not result.replace(' ', '').replace('\\t', '').replace('\\n', '').isalnum() else result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/161", "completion": "    result = ''\n    for c in s:\n        if c.isalpha():\n            result += c.swapcase()\n        else:\n            result += c\n    return result[::-1] if not result[::2].isalpha() else result"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    min_num = min(a, b)\n    max_num = max(a, b)\n    even_digits = [i for i in range(min_num, max_num + 1) if i % 2 == 0]\n    return sorted(even_digits)"}
{"task_id": "HumanEval/163", "completion": "    return list(range(min(a,b), max(a,b)+1))[::2] if min(a,b) % 2 == 0 else list(range(max(a,b)-1, min(a,b)-1,-2))"}
{"task_id": "HumanEval/163", "completion": "    even_digits = [i for i in range(min(a,b), max(a,b)+1) if i % 2 == 0]\n    return sorted(even_digits)"}
