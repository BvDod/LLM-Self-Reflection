{"task_id": "HumanEval/9", "completion": "   result = []\n    max_so_far = float('-inf')\n    \n    for num in numbers:\n        max_so_far = max(num, max_so_far)\n        result.append(max_so_far)\n        \n    return result"}
{"task_id": "HumanEval/45", "completion": "   \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2"}
{"task_id": "HumanEval/144", "completion": "   x_fraction = Fraction(x)\n    n_fraction = Fraction(n)\n\n    return (x_fraction * n_fraction).denominator == 1"}
{"task_id": "HumanEval/124", "completion": "   try:\n        day, month, year = map(int, date.split('-'))\n        \n        if not date or len(date) != 10 or '/' in date or '::' in date:\n            return False\n        \n        if (month < 1 or month > 12):\n            return False\n        elif ((month == 2 and day > 29) or \n              (month in [4,6,9,11] and day > 30) or \n              (day > 31)):\n            return False\n            \n        return True\n    \n    except ValueError:\n        return False"}
{"task_id": "HumanEval/19", "completion": "   num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    numbers_list = numbers.split()\n    \n    sorted_numbers = sorted(numbers_list, key=lambda x: num_dict[x])\n    \n    return ' '.join(sorted_numbers)"}
{"task_id": "HumanEval/0", "completion": "   \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \n    Args:\n        numbers (List[float]): A list of floating point numbers.\n        threshold (float): The minimum distance between two numbers for them to be considered close.\n\n    Returns:\n        bool: True if there are close elements in the list, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in numbers:\n        for prev_num in seen:\n            if abs(num - prev_num) <= threshold:\n                return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/71", "completion": "   if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c)/2\n        area = round(math.sqrt(s*(s-a)*(s-b)*(s-c)), 2)\n        return area\n    else:\n        return -1"}
{"task_id": "HumanEval/97", "completion": "   \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\"\"\"\n    a_unit_digit = a % 10\n    b_unit_digit = b % 10\n    return a_unit_digit * b_unit_digit"}
{"task_id": "HumanEval/14", "completion": "   return [string[:i] for i in range(1, len(string)+1)]"}
{"task_id": "HumanEval/114", "completion": "   current_sum = result = nums[0]\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        result = min(result, current_sum)\n    return result"}
