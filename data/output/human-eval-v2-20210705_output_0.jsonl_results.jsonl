{"task_id": "HumanEval/0", "completion": "    return any(abs(a - b) <= threshold for a in numbers for b in numbers if a != b)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/1", "completion": "    pattern = r'\\([^()]+\\)'\n    return re.findall(pattern, paren_string)", "result": "failed: name 're' is not defined", "passed": false}
{"task_id": "HumanEval/2", "completion": "    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "    numbers.sort()\n    median = numbers[len(numbers) // 2] if len(numbers) % 2 != 0 else (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    return sum(abs(num - median) for num in numbers) / len(numbers)", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for num in numbers:\n        result.extend([num, delimeter])\n    if len(result) > 1:\n        result.pop()\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "    def count_nesting(group):\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        return max_depth\n\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        result.append(count_nesting(group))\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "    total_sum = 1 if not numbers else 0\n    product = 1\n    for num in numbers:\n        total_sum += num\n        product *= num\n    return total_sum, product", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_so_far = float('-inf')\n    \n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n        \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    longest_prefix = ''\n    for i in range(len(string), -1, -1):\n        prefix = string[:i]\n        postfix = string[i:]\n        \n        # Check if the postfix is a palindrome\n        if postfix == postfix[::-1]:\n            longest_prefix = prefix\n            break\n\n    return string + longest_prefix[::-1]\n\ndef count_vowels(string: str) -> int:\n    \"\"\" Count vowels in given string \"\"\"\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in string if char in vowels)\n\n\ndef remove_duplicates(string: str) -> str:\n    \"\"\" Remove duplicates from the given string \"\"\"\n    seen = set()\n    return ''.join(char for char in string if not (char in seen or seen.add(char)))\n\n\ndef get_middle_char(string: str) -> str:\n    \"\"\" Get middle character(s) of the string \"\"\"\n    length = len(string)\n    middle_index = length // 2\n\n    # If string has odd length, return single character\n    if length % 2 != 0:\n        return string[middle_index]\n\n    # If string has even length, return two characters\n    return string[middle_index - 1:middle_index + 1]\n\n\ndef reverse_string(string: str) -> str:\n    \"\"\" Reverse the given string \"\"\"\n    return string[::-1]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "completion": "    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join('1' if (x == '1' and y == '0') or (x == '0' and y == '1') else '0' for x, y in zip(a, b))", "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "    \"\"\"\n    Return list of all prefixes from shortest to longest of the input string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of prefixes.\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n + 1))", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(char.lower() for char in string))", "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "completion": "    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    notes = music_string.split()\n    \n    result = []\n    \n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        else:  # '.|'\n            result.append(1)\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "completion": "    return string.count(substring)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/19", "completion": "    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    numbers = [num_dict[num] for num in numbers.split()]\n    sorted_numbers = sorted(numbers)\n    \n    return ' '.join([list(num_dict.keys())[i] for i in sorted_numbers])", "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "completion": "    \"\"\" From a supplied list of integers find and return the smallest positive integer missing from the list.\n    >>> find_smallest_missing_positive_integer([1, 2, 3, 4, 5])\n    6\n    >>> find_smallest_missing_positive_integer([-1, -2, 0, 2, 7])\n    1\n    \"\"\"\n    nums = set(nums)\n    i = 1\n    while i in nums:\n        i += 1\n    return i\n\ndef is_prime(num: int) -> bool:\n    \"\"\" Check if a supplied number is prime.\n    >>> is_prime(5)\n    True\n    >>> is_prime(10)\n    False\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef remove_duplicates(input_list: List[int]) -> List[int]:\n    \"\"\" From a supplied list of integers remove any duplicates and return the resulting list.\n    >>> remove_duplicates([1, 2, 3, 4, 5, 5, 6])\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    output_list = []\n    for i in input_list:\n        if i not in output_list:\n            output_list.append(i)\n    return output_list\n\ndef find_max_value(input_dict: Dict[str, int]) -> Tuple[str, int]:\n    \"\"\" From a supplied dictionary of string keys and integer values find the key-value pair with the maximum value\n    and return it.\n    >>> find_max_value({\"a\": 1, \"b\": 2, \"c\": 3})\n    ('c', 3)\n    \"\"\"\n    max_key = max(input_dict, key=input_dict.get)\n    return max_key, input_dict[max_key]\n\ndef check_palindrome(s: str) -> bool:\n    \"\"\" Check if a supplied string is a palindrome.\n    >>> check_palindrome(\"radar\")\n    True\n    >>> check_palindrome(\"hello\")\n    False\n    \"\"\"\n    s = ''.join(c for c in s if c.isalnum()).lower()\n    return s == s[::-1]\n\ndef find_max_length(input_list: List[int]) -> int:\n    \"\"\" From a supplied list of integers find the length of the longest sublist and return it.\n    >>> find_max_length([1, 2, 3, 4, 5])\n    1\n    >>> find_max_length([1, 2, [3, 4], 5])\n    2\n    \"\"\"\n    max_len = 0\n    for i in input_list:\n        if isinstance(i, list):\n            max_len = max(max_len, len(i))\n    return max_len\n\ndef count_vowels(input_string: str) -> int:\n    \"\"\" From a supplied string count the number of vowels and return it.\n    >>> count_vowels(\"hello\")\n    2\n    >>> count_vowels(\"aeiou\")\n    5\n    \"\"\"\n    vowels = \"aeiou\"\n    return sum(1 for c in input_string.lower() if c in vowels)\n\ndef find_min_value(input_dict: Dict[str, int]) -> Tuple[str, int]:\n    \"\"\" From a supplied dictionary of string keys and integer values find the key-value pair with the minimum value\n    and return it.\n    >>> find_min_value({\"a\": 1, \"b\": 2, \"c\": 3})\n    ('a', 1)\n    \"\"\"\n    min_key = min(input_dict, key=input_dict.get)\n    return min_key, input_dict[min_key]\n\ndef check_perfect_square(n: int) -> bool:\n    \"\"\" Check if a supplied integer is a perfect square.\n    >>> check_perfect_square(16)\n    True\n    >>> check_perfect_square(20)\n    False\n    \"\"\"\n    return n >= 0 and (n ** 0.5).is_integer()\n\ndef find_max_value(input_dict: Dict[str, int]) -> Tuple[str, int]:\n    \"\"\" From a supplied dictionary of string keys and integer values find the key-value pair with the maximum value\n    and return it.\n    >>> find_max_value({\"a\": 1, \"b\": 2, \"c\": 3})\n    ('c', 3)\n    \"\"\"\n    max_key = max(input_dict, key=input_dict.get)\n    return max_key, input_dict[max_key]", "result": "failed: name 'Dict' is not defined", "passed": false}
{"task_id": "HumanEval/21", "completion": "    return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "completion": "    factors = {}\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors[i] = factors.get(i, 0) + 1\n    if n > 1:\n        factors[n] = factors.get(n, 0) + 1\n    return list(factors.keys())", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    \n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n            \n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.upper() if c.islower() else c.lower() for c in string)", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)\n\ndef greet(name: str) -> None:\n    print(f\"Hello, {name}!\")\n\ndef sum_numbers(numbers: List[int]) -> int:\n    return sum(numbers)", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in lst if num > 0]", "result": "failed: name 'lst' is not defined", "passed": false}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds the zero point of a polynomial with coefficients xs.\n    \n    Parameters:\n    xs (list): List of coefficients of a polynomial, where largest non-zero coefficient is guaranteed to be at index 0.\n\n    Returns:\n    float: The x value such that poly(x) = 0.\n\n    Raises:\n    ValueError: If the list xs does not have an even number of elements.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have an even number of coefficients\")\n\n    n = len(xs)\n    \n    # Check if largest non-zero coefficient is at index 0\n    if xs[0] == 0:\n        raise ValueError(\"Largest non-zero coefficient must be at index 0\")\n\n    a, b = -xs[n-1], xs[n-2]\n    \n    return -b / a\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    \n    Parameters:\n    xs (list): List of coefficients of a polynomial.\n    x (float): The point at which to evaluate the polynomial.\n\n    Returns:\n    float: The value of the polynomial at point x.\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/33", "completion": "    return [x if i % 3 != 0 else sorted([l[j] for j in range(len(l)) if j % 3 == 0])[k] for i, x in enumerate(l)]", "result": "failed: name 'k' is not defined", "passed": false}
{"task_id": "HumanEval/34", "completion": "    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(lst))", "result": "failed: name 'lst' is not defined", "passed": false}
{"task_id": "HumanEval/35", "completion": "    return max(lst)", "result": "failed: name 'lst' is not defined", "passed": false}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(n-1, 0, -1):\n        if (i % 11 == 0) or (i % 13 == 0):\n            str_i = str(i)\n            count += str_i.count('7')\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "completion": "    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    evens = sorted([x for i, x in enumerate(l) if i % 2 == 0])\n    return [evens[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups of 3 characters each.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode elements in each group by moving first element to end. Unless group has fewer than 3 elements.\n    groups = [(group[-1] + group[:-1]) if len(group) >= 3 else group for group in groups]\n    return \"\".join(groups)", "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    i = 1\n    while True:\n        a, b = b, a + b\n        if b >= n:\n            return b\n        elif is_prime(b):\n            i += 1\n        if i == n:\n            return b", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/40", "completion": "    seen = set()\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if -lst[i] - lst[j] in seen:\n                return True\n            seen.add(lst[i]+lst[j])\n    return False", "result": "failed: name 'lst' is not defined", "passed": false}
{"task_id": "HumanEval/41", "completion": "    total_cars = n * 2\n    return total_cars ** 2 - total_cars", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "completion": "    return [i + 1 for i in l]", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "    \"\"\"\n    This function checks if there are two distinct elements in the list that sum to zero.\n    \n    Parameters:\n    lst (list): A list of integers\n    \n    Returns:\n    bool: True if two distinct elements sum to zero, False otherwise\n    \"\"\"\n    seen = set()\n    for num in lst:\n        complement = -num\n        if complement not in seen and complement != 0:\n            return True\n        seen.add(num)\n    return False", "result": "failed: name 'lst' is not defined", "passed": false}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return \"0\"\n    \n    nums = []\n    while x > 0:\n        nums.append(int(x % base))\n        x //= base\n    \n    return ''.join(map(str, reversed(nums)))", "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "completion": "    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        F_n_3 = 0\n        F_n_2 = 0\n        F_n_1 = 2\n        for _ in range(4, n + 1):\n            F_n = F_n_1 + F_n_2 + F_n_3 + 0\n            F_n_3 = F_n_2\n            F_n_2 = F_n_1\n            F_n_1 = F_n\n        return F_n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/47", "completion": "    sorted_l = sorted(l)\n    n = len(sorted_l)\n\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        mid1, mid2 = (n // 2 - 1), (n // 2)\n        return (sorted_l[mid1] + sorted_l[mid2]) / 2", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "    return pow(n, p-1, p)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) + 5) % 26 + ord(\"a\")) for ch in s.lower() if ch.isalpha()])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) - 5) % 26 + ord(\"a\")) for ch in s.lower() if ch.isalpha()])", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in text if char not in vowels])", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "    return all(num < threshold for num in lst)", "result": "failed: name 'lst' is not defined", "passed": false}
{"task_id": "HumanEval/53", "completion": "    \"\"\"Return the sum of two integers\"\"\"\n    return x + y", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "result": "failed: unsupported operand type(s) for +: 'int' and 'str'", "passed": false}
{"task_id": "HumanEval/56", "completion": "    return brackets.count('<') == brackets.count('>')", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/57", "completion": "    return all(x <= y for x, y in zip(l, l[1:] + [float('inf')])) or \\\n           all(y <= x for x, y in zip(l, l[1:] + [float('-inf')]))", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0 or stack.pop() != \"(\":\n                return False\n    return len(stack) == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "    return [i * x for i, x in enumerate(reversed(xs))[1:]]", "result": "failed: 'enumerate' object is not subscriptable", "passed": false}
{"task_id": "HumanEval/63", "completion": "    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 0\n        c = 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "    return sum(1 for c in s if c.lower() in 'aeiouy' and (not c.isupper() or c == s[-1]))", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/65", "completion": "    str_x = str(x)\n    n = len(str_x)\n    \n    if shift >= n:\n        return str_x[::-1]\n    else:\n        return (str_x[-shift:] + str_x[:-shift])", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "completion": "    return sum([ord(c) for c in s if c.isupper()])", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "    num_and_fruit = s.split(', ')\n    total_apples = int(num_and_fruit[0].split(' ')[-1])\n    total_oranges = int(num_and_fruit[1].split(' ')[-1])\n    \n    return n - total_apples - total_oranges", "result": "failed: invalid literal for int() with base 10: 'oranges'", "passed": false}
{"task_id": "HumanEval/68", "completion": "    even_values = [i for i in range(len(arr)) if arr[i] % 2 == 0]\n    min_value = float('inf')\n    \n    if not even_values:\n        return []\n        \n    for value, idx in enumerate(even_values):\n        if arr[idx] < min_value:\n            min_value = arr[idx]\n\n    smallest_even_index = [i for i in range(len(arr)) if arr[i] == min_value][0]\n    return [min_value, smallest_even_index]", "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "completion": "    frequency = {}\n    \n    for i in lst:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n            \n    sorted_frequency = dict(sorted(frequency.items(), key=lambda item: item[1], reverse=True))\n            \n    for k, v in sorted_frequency.items():\n        if k >= v:\n            return k\n        \n    return -1", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/70", "completion": "    sorted_lst = sorted(lst)\n    result = []\n    \n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c)/2\n        area = round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n        return area\n    else:\n        return -1", "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q) <= w", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    \n    if n % 2 != 0:\n        mid = (n - 1) // 2\n        max_val = max(arr[:mid] + arr[mid+1:])\n        \n        arr = [max_val] * n\n    \n    changes = 0\n    left, right = 0, n-1\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    \n    return changes", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/74", "completion": "    return min([lst1, lst2], key=lambda x: sum(len(i) for i in x))", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "    def count_prime_factors(n):\n        factors = {}\n        divisor = 2\n        while n > 1:\n            if n % divisor == 0:\n                factors[divisor] = factors.get(divisor, 0) + 1\n                n //= divisor\n            else:\n                divisor += 1\n        return factors\n\n    prime_factors = count_prime_factors(a)\n    return len(prime_factors.keys()) >= 3 and any(val == 1 for val in prime_factors.values())", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "completion": "    if x <= 0:\n        return False\n    return round(x ** (1/n)) ** n == x", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "completion": "    return round(a ** (1./3)) ** 3 == a", "result": "failed: type complex doesn't define __round__ method", "passed": false}
{"task_id": "HumanEval/78", "completion": "    prime_hex_digits = set('2B5D')\n    return sum(1 for c in num if c in prime_hex_digits)", "result": "failed: Second test error: 0", "passed": false}
{"task_id": "HumanEval/79", "completion": "    return f\"db{bin(decimal)[2:]}db\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True", "result": "failed: aabb", "passed": false}
{"task_id": "HumanEval/81", "completion": "    grades = [float(g) for g in grades]  # convert to float\n    \n    letter_grades = []\n    \n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    \n    return letter_grades", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    is_prime = lambda x: all(x % i for i in range(2, int(x**0.5) + 1))\n    return is_prime(length)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/83", "completion": "    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit \n    positive integers that start or end with 1.\n    \"\"\"\n    total = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            total += 1\n    return total", "result": "passed", "passed": true}
{"task_id": "HumanEval/84", "completion": "    return bin(sum([int(i) for i in bin(N)[2:]]))[2:]", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "completion": "    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 == 0)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/86", "completion": "    return ' '.join(''.join(sorted(word)) for word in s.split())", "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            coords = [(j, len(row) - idx - 1) for j, val in enumerate(row) if val == x]\n            result.extend([(i, col) for col in sorted(coords, key=lambda tup: tup[1], reverse=True)])\n    return sorted(result, key=lambda tup: tup[0])", "result": "failed: name 'idx' is not defined", "passed": false}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return array\n\n    first_index = array[0]\n    last_index = array[-1]\n\n    sum_indices = first_index + last_index\n    if sum_indices % 2 == 1:\n        sorted_array = sorted(array)\n    else:\n        sorted_array = sorted(array, reverse=True)\n\n    return sorted_array", "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            new_pos = (ord(char) - ascii_offset + 8) % 26 + ascii_offset\n            result += chr(new_pos)\n    return result", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/90", "completion": "    sorted_lst = sorted(set(lst))  # Remove duplicates and sort the list\n    if len(sorted_lst) < 2:\n        return None\n    else:\n        return sorted_lst[1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('. ')\n    sentences += S.split('? ') + [S.split('! ')[-1]] # split on '? ' and '! '\n    return sum(1 for s in sentences if s.startswith('I '))", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/92", "completion": "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or x == z + y or y == z + x)", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/93", "completion": "    vowels = {'a': '', 'e': '', 'i': '', 'o': '', 'u': ''}\n    result = ''\n    \n    for char in message:\n        if char.isalpha():\n            shift = 2 if char.islower() else -2\n            shifted_char = chr((ord(char) + shift))\n            \n            # If shifted character is a vowel, set it to the original letter two positions ahead of the vowel\n            if shifted_char.lower() in vowels.keys():\n                result += shifted_char.upper()\n            else:\n                result += shifted_char\n            \n        else:\n            result += char\n    \n    return result", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = None\n    for num in lst:\n        if is_prime(num):\n            if not max_prime or num > max_prime:\n                max_prime = num\n                \n    if max_prime is None:\n        raise ValueError(\"No prime numbers found\")\n    \n    return sum(int(digit) for digit in str(max_prime))", "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    \n    keys_all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    keys_all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n\n    return keys_all_lower or keys_all_upper", "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "completion": "    unit_a = a % 10\n    unit_b = abs(b) % 10\n    return (unit_a * unit_b)", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "    return sum(1 for i, c in enumerate(s) if 'AEIOU'.upper() == s[:i+1].upper() and c in 'AEIOU')", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/99", "completion": "    value = float(value)\n    if abs(value - round(value)) < 0.000001:\n        return round(value)\n    else:\n        return int(round(value + 0.5))", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(n):\n        if n % 2 == 0:  # If n is even\n            new_level = (i // 2 + 1) * 2 if i else 2\n        else:  # If n is odd\n            new_level = ((i // 2 + 1) * 2) + 1 if i else 1\n        pile.append(new_level)\n    return pile", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/101", "completion": "    return s.split(', ')", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/102", "completion": "    even_nums = [i for i in range(x, y+1) if i % 2 == 0]\n    return max(even_nums) if even_nums else -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    \n    total = sum(range(n, m+1))\n    \n    avg = round(total / (m - n + 1))\n    \n    binary = bin(avg)[2:]\n    \n    return \"0b\" + binary", "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n    \n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "    num_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n                 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    \n    sorted_arr = sorted([x for x in arr if 1 <= x <= 9])\n    reversed_arr = sorted_arr[::-1]\n    \n    return [num_names[x] for x in reversed_arr]\n\n# Test the function\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))  \nprint(by_length([]))  \nprint(by_length([1, -1 , 55]))", "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "completion": "    return [i * (i-1) if i % 2 else sum(range(i+1)) for i in range(1, n + 1)]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    \n    min_num = min(arr)\n    \n    return arr[-1] <= min_num", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/110", "completion": "    return 'YES' if not any(i % 2 != 0 for i in lst1) or set(i % 2 == 0 for i in lst1).issubset(set(i % 2 == 0 for i in lst2)) else 'NO'", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    \n    letter_count = {}\n    \n    for word in test.split():\n        for char in word:\n            if char.isalpha():\n                count = letter_count.get(char, 0) + 1\n                letter_count[char] = count\n    \n    max_count = max(letter_count.values())\n    \n    result = {k: v for k, v in letter_count.items() if v == max_count}\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "completion": "    new_s = ''.join([char for char in s if char not in c])\n    return (new_s, new_s == new_s[::-1])", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "    return [f\"the number of odd elements {len(''.join(s)) // 2} in the string {''.join(s)} of the input.\" for s in lst]", "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "completion": "    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    \n    curr_sum = 0\n    \n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        \n        if curr_sum > 0:\n            curr_sum = 0\n            \n    return min_sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "    return sum(max((len(row) - 1) // capacity + 1, len(row)) for row in grid)", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    selected = [word for word in words if len([c for c in word.lower() if c.isalpha() and c not in 'aeiou']) == n]\n    return selected", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "    vowels = 'AEIOUY'\n    word = word[::-1]  # Reverse the string\n    \n    for i, char in enumerate(word[1:-1]):  # Iterate through the reversed string (excluding first and last chars)\n        if char in vowels:\n            return word[-i-2]\n    \n    return \"\"  # Return empty string if no vowel is found", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "completion": "    open_count = lst[0].count('(') - lst[0].count(')')\n    close_count = lst[1].count(')') - lst[1].count('(')\n    \n    return 'Yes' if open_count == close_count else 'No'", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "completion": "    return sorted(arr)[-k:]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "completion": "    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "    return sum(num for num in arr[:k] if len(str(abs(num))) <= 2)", "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "completion": "    def collatz_sequence(num):\n        seq = [num]\n        while num != 1:\n            if num % 2 == 0:\n                num //= 2\n            else:\n                num = 3 * num + 1\n            seq.append(num)\n        return seq\n\n    sequence = collatz_sequence(n)\n    odd_collatz = sorted([x for x in sequence if x % 2 != 0])\n    \n    # Remove duplicates and sort the list\n    odd_collatz = sorted(list(set(odd_collatz)))\n    \n    return odd_collatz[1:]  # exclude initial n in the list, as per Note: ", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/124", "completion": "    try:\n        day, month, year = map(int, date.split('-'))\n        \n        if 1 <= month <= 12 and 1 <= day <= (30 if month in [4,6,9,11] else 31) and (month == 2 and day <= 29 or day != 29):\n            return True\n    except ValueError:\n        pass\n    \n    return False", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    if not any(c in ' ,.' for c in txt): \n        return sum(1 for i, _ in enumerate(txt.lower()) if i % 2 != 0)\n    elif ',' not in txt: \n        return sum(1 for i, _ in enumerate(txt.lower()) if i % 2 != 0)\n    else:\n        return words", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "completion": "    return len(set(lst)) == 1 or lst == sorted(lst)", "result": "failed: This prints if this assert fails 5 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "completion": "    \"\"\"Check if n is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Check if the length of intersection of two intervals is a prime number\"\"\"\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # Check if the intervals intersect\n    if start <= end:\n        # Calculate the length of intersection\n        length = end - start + 1\n\n        # Check if the length is a prime number\n        return \"YES\" if is_prime(length) else \"NO\"\n    else:\n        return \"NO\"", "result": "failed: name 'is_prime' is not defined", "passed": false}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    \n    signs = [num // abs(num) if num != 0 else 0 for num in arr]\n    \n    sign_product = 1\n    for sign in signs:\n        sign_product *= sign\n    \n    return sum(abs(num) for num in arr) * sign_product", "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "completion": "    N = len(grid)\n    values = []\n    \n    # Get all unique cell values and their coordinates\n    for i in range(N):\n        for j in range(N):\n            values.append((grid[i][j], (i, j)))\n    \n    max_val = 1 << 32\n    min_path = []\n    \n    queue = deque([(0, set(), [])])  # time, visited cells, path\n    \n    while queue:\n        t, v, p = queue.popleft()\n        \n        if len(p) == k and (not min_path or p < min_path):\n            return [x[0] for x in sorted(p)]\n        \n        if t > max_val:\n            continue\n        \n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = v.pop().count(dx) * (v and v[-1][0] == dx) + dx, v.pop().count(dy) * (v and v[-1][1] == dy) + dy\n            \n            if 0 <= nx < N and 0 <= ny < N:\n                nv = set(v)\n                nv.add((nx, ny))\n                \n                queue.append((t + grid[nx][ny], nv, p + [(grid[nx][ny], (nx, ny))]))\n    \n    return []", "result": "failed: name 'deque' is not defined", "passed": false}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    else:\n        sequence = [3, 2]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                sequence.append(int(1 + (i / 2)))\n            else:\n                sequence.append(sequence[i - 2] + sequence[i - 3] + int(sequence[i - 1]))\n        return [sequence[0]] + sequence", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "completion": "    prod = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n    return prod", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return bool(stack)", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "completion": "    return sum(math.ceil(i)**2 for i in lst)", "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/134", "completion": "    if not txt:  # check if the string is empty\n        return False\n    last_char = txt[-1]  # get the last character of the string\n    if txt.count(last_char) == 1:  # check if the last character is a single occurrence\n        return last_char.isalpha()  # return True if it's an alphabet character, False otherwise\n    else:\n        return False", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i + 1]:\n            return i\n    return -1", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "completion": "    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n\n    if neg_ints:\n        max_neg = max(neg_ints)\n    else:\n        max_neg = None\n\n    if pos_ints:\n        min_pos = min(pos_ints)\n    else:\n        min_pos = None\n\n    return max_neg, min_pos", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "    a = float(a)\n    b = float(b)\n\n    if type(a) == str and '.' in a:\n        a = a.replace('.', ',')\n\n    if type(b) == str and '.' in b:\n        b = b.replace('.', ',')\n\n    try:\n        return max(a, b)\n    except ValueError:\n        return None", "result": "failed: could not convert string to float: '2,3'", "passed": false}
{"task_id": "HumanEval/138", "completion": "    for i in range(2, n // 2 + 1, 2):\n        for j in range(i, (n - i) // 2 + 1, 2):\n            if n == i + j + (n - i - j) // 2:\n                return True\n    return False", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "completion": "    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(' ', '_')\n    while '__' in text:\n        text = text.replace('__', '-')\n\n    return text", "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "completion": "    conditions = [\n        lambda x: len(re.findall('\\d', x)) <= 3,\n        lambda x: x.count('.') == 1,\n        lambda x: bool(re.match('^[a-zA-Z]', x.split('.')[0])),\n        lambda x: x.split('.')[1] in ['txt', 'exe', 'dll']\n    ]\n    \n    return 'Yes' if all(conditions) else 'No'", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "completion": "    return sum(\n        num ** (3 if i % 12 == 0 else 4 if i % 12 == 3 else 2)\n        for i, num in enumerate(lst)\n    )", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = \"\"\n    for word in sentence.split():\n        if len(word) > 1 and is_prime(len(word)):\n            result += word + \" \"\n    return result.strip()", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "    frac_x = Fraction(x)\n    frac_n = Fraction(n)\n\n    return (frac_x * frac_n).denominator == 1", "result": "failed: name 'Fraction' is not defined", "passed": false}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    max_sum_3 = 0\n    \n    for k in range(len(a)):\n        for j in range(k+1, len(a)):\n            for i in range(j+1):\n                if (a[i] + a[j] + a[k]) % 3 == 0 and a[i] < a[j] < a[k]:\n                    max_sum_3 = max(max_sum_3, a[i] + a[j] + a[k])\n                    \n    return 1 if max_sum_3 == a[-1] else 0", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n\n    between_planets = [p for p in planets if idx1 < planets.index(p) < idx2]\n    \n    return tuple(between_planets)", "result": "failed: Second test error: ()", "passed": false}
{"task_id": "HumanEval/149", "completion": "    lst.sort(key=lambda x: (len(x), x))\n    return [x for x in lst if len(x) % 2 == 0]", "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "    return sum(x**2 for x in lst if isinstance(x, int) and x % 2 != 0)", "result": "failed: This prints if this assert fails 5 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/152", "completion": "    return [abs(g - g_) for g, g_ in zip(game, guess)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "    max_strength = float('-inf')\n    strongest_extension = None\n    \n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        \n        strength = cap - sm\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n            \n    return f\"{class_name}.{strongest_extension}\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "    if len(b) > len(a):\n        return False\n    for i in range(len(a)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "completion": "    num = abs(num) # Take absolute value to remove negative sign\n    even_digits = sum(1 for digit in str(num) if int(digit) % 2 == 0)\n    odd_digits = len(str(num)) - even_digits\n    return (even_digits, odd_digits)", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    \n    result = ''\n    \n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n            \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "    max_word = ''\n    max_unique = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < max_word):\n            max_word = word\n            max_unique = unique_chars\n    return max_word", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "    return [number + min(need, remaining), max(remaining - need, 0)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "completion": "    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, \n    and the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    Args:\n        operator (list): A list of operators.\n        operand (list): A list of operands.\n\n    Returns:\n        int: The result of the algebraic expression.\n    \"\"\"\n    result = operand[0]\n    \n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result = result // operand[i + 1]\n        elif operator[i] == '**':\n            result = result ** operand[i + 1]\n    \n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1] if not result[0].isalpha() else result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()", "result": "failed: name 'hashlib' is not defined", "passed": false}
{"task_id": "HumanEval/163", "completion": "    def is_even(n):\n        return n % 2 == 0\n    \n    min_num = min(a, b)\n    max_num = max(a, b)\n\n    even_numbers = [i for i in range(min_num, max_num + 1) if is_even(i)]\n\n    return sorted(even_numbers)", "result": "failed: Test 1", "passed": false}
